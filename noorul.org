#+TITLE: Noorul Islam's Emacs configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: showeverything
#+PROPERTY: header-args:emacs-lisp :tangle "~/.emacs.d/noorul.el"

* Configuration
** About this file
This is my personal configuration. Most of the configurations are re-used from
other sources. I tried my best to credit them via comments and links but I might
have missed some.

My =~/.emacs.d/init.el= is now a symlink to =noorul.el=, which is what =M-x
org-babel-tangle= (=C-c C-v t=) produces.
** Starting up
#+begin_src emacs-lisp
;;;; Starting up
(package-initialize)
(setq use-package-always-ensure t)
(add-to-list 'load-path "~/projects/elisp/org-mode/lisp")
(add-to-list 'load-path "~/projects/elisp/org-mode/contrib/lisp")
(setq custom-file "~/.emacs.d/custom-settings.el")
(load custom-file t)
#+end_src

** Personal information
#+begin_src emacs-lisp
(setq user-full-name "Noorul Islam K M"
      user-mail-address "noorul@noorul.com")
#+end_src

** Emacs initialization
*** Add package sources
 #+begin_src emacs-lisp
 (unless (assoc-default "melpa" package-archives)
   (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
   )
 (unless (assoc-default "melpa-stable" package-archives)
   (add-to-list 'package-archives
		'("melpa-stable" . "https://stable.melpa.org/packages/") t)
   )
 #+end_src
*** Setup use-package
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-verbose t)
(setq use-package-always-ensure t)
(require 'use-package)
(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+end_src

** General configuration
*** Reload

#+begin_src emacs-lisp
(defun my/reload-emacs-configuration ()
  (interactive)
  (load-file "~/.emacs.d/init.el"))
#+end_src
*** UTF-8

From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html

#+begin_src
(setenv "LC_ALL" "en_US.UTF-8")
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src
*** Define some useful constants
#+begin_src emacs-lisp
(defconst user-data-directory
  (expand-file-name "data/" user-emacs-directory))
#+end_src
*** Libraries

#+begin_src emacs-lisp
(use-package dash :ensure t)
(use-package diminish :ensure t)
#+end_src
*** Backups

This is one of the things people usually want to change right away. By default, Emacs saves backup files in the current directory. These are the files ending in =~= that are cluttering up your directory lists. The following code stashes them all in =~/.emacs.d/backups=, where I can find them with =C-x C-f= (=find-file=) if I really need to.

#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+end_src

Disk space is cheap. Save lots.

#+begin_src emacs-lisp
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src

*** Windows configuration
I am not a fan of tool bar as I prefer command line.

#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src

*** Time in the modeline

I like having the clock.

#+begin_src emacs-lisp
(display-time-mode 1)
#+end_src
*** Winner mode - undo and redo window configuration
winner-mode lets you use C-c <left> and C-c <right> to switch between window configurations. This is handy when something has popped up a buffer that you want to look at briefly before returning to whatever you were working on. When you're done, press C-c <left>.
#+begin_src
(use-package winner
  :defer t)
#+end_src

*** Sentences end with a single space
#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src
*** I hate typing full 'yes', just 'y' is enough.
#+begin_src emacs-lisp
;; I hate typing full 'yes', just 'y' is enough.
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
*** Hide tool bar, scroll bar and menu bar
#+begin_src emacs-lisp
;; I don't need tool bar, scroll bar and menu bar
;; I get lots of real estate without them.
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
#+end_src

*** I not a fan of splash screen and startup message
#+begin_src emacs-lisp
;; I don't need splash screen everytime
(setq inhibit-splash-screen t)

;; Don't show the startup screen
(setq inhibit-startup-message t)
#+end_src
*** No tabs, only space.
;; Not tabs only space.
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src
*** Syntax highlighting
#+begin_src emacs-lisp
;; Syntax highlighting is must
(setq global-font-lock-mode t)
#+end_src

*** Helm - Interactive completion
#+begin_src emacs-lisp

(use-package helm
  :ensure t
  :diminish helm-mode
  :init
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 100)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                        ; reeeelatively quickly.
          helm-yas-display-key-on-candidate t
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
    (setq helm-delete-minibuffer-contents-from-point t)
    (setq helm-ff-file-name-history-use-recentf t)
    (setq helm-ff-search-library-in-sexp t)
    (setq helm-ff-skip-boring-files t)
    (setq helm-ls-git-show-abs-or-relative (quote relative))
    (setq helm-quick-update t)
    (setq helm-recentf-fuzzy-match t)
    (setq helm-M-x-fuzzy-match t)
    (setq helm-for-files-preferred-list
          (quote
           (helm-source-files-in-current-dir helm-source-recentf helm-source-bookmarks helm-source-file-cache helm-source-buffers-list helm-source-locate helm-source-ls-git))))
  :bind (("C-c h" . helm-mini)
         ("C-h a" . helm-apropos)
         ;; ("C-x C-b" . helm-buffers-list)
         ;; ("C-x b" . helm-buffers-list)
         ("M-y" . helm-show-kill-ring)
         ("M-x" . helm-M-x)
         ("C-x f" . counsel-recentf)
         ("C-x c o" . helm-occur)
         ("C-x c s" . helm-swoop)
         ("C-x c y" . helm-yas-complete)
         ("C-x c Y" . helm-yas-create-snippet-on-region)
         ("C-x c b" . my/helm-do-grep-book-notes)
         ("C-x c SPC" . helm-all-mark-rings))
  :config
  (use-package helm-ls-git
    :ensure t))
(ido-mode -1) ;; Turn off ido mode in case I enabled it accidentally

(use-package helm-descbinds
  :ensure t
  :bind ("C-h b" . helm-descbinds)
  :init
  (fset 'describe-bindings 'helm-descbinds)
  :config
  (require 'helm-config))
#+end_src
** Startup
#+begin_src emacs-lisp
(org-agenda nil " ")
(if (system-is-mac)
    (progn
      (toggle-frame-fullscreen)
      (toggle-frame-fullscreen)))
#+end_src
