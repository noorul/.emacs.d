#+TITLE: Noorul Islam's Emacs configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: showeverything
#+PROPERTY: header-args:emacs-lisp :tangle "~/.emacs.d/noorul.el"

* Configuration
** About this file
This is my personal configuration. Most of the configurations are re-used from
other sources. I tried my best to credit them via comments and links but I might
have missed some.

My =~/.emacs.d/init.el= is now a symlink to =noorul.el=, which is what =M-x
org-babel-tangle= (=C-c C-v t=) produces.
** Starting up
#+begin_src emacs-lisp
;;;; Starting up
(package-initialize)
(setq use-package-always-ensure t)
(add-to-list 'load-path "~/code.orgmode.org/bzg/org-mode/lisp")
(add-to-list 'load-path "~/code.orgmode.org/bzg/org-mode/contrib/lisp")
(setq custom-file "~/.emacs.d/custom-settings.el")
(load custom-file t)
#+end_src
** System information
#+begin_src emacs-lisp
(defun my/macbookpro ()
  (interactive)
  (string-equal system-type "darwin"))
#+end_src
** Personal information
#+begin_src emacs-lisp
(setq user-full-name "Noorul Islam K M"
      user-mail-address "noorul@noorul.com")
#+end_src

** Emacs initialization
*** Add package sources
 #+begin_src emacs-lisp
 (unless (assoc-default "melpa" package-archives)
   (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
   )
 (unless (assoc-default "melpa-stable" package-archives)
   (add-to-list 'package-archives
		'("melpa-stable" . "https://stable.melpa.org/packages/") t)
   )
 #+end_src
*** Setup use-package
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-verbose t)
(setq use-package-always-ensure t)
(require 'use-package)
(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+end_src

** General configuration
*** Reload

#+begin_src emacs-lisp
(defun my/reload-emacs-configuration ()
  (interactive)
  (load-file "~/.emacs.d/init.el"))
#+end_src
*** UTF-8

From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html

#+begin_src
(setenv "LC_ALL" "en_US.UTF-8")
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src
*** Mac OS X specific configuration
#+BEGIN_SRC emacs-lisp
(require 'cl)
(use-package exec-path-from-shell
  :ensure t)

(when (memq window-system '(mac ns))
  (require 'exec-path-from-shell)
  (exec-path-from-shell-initialize))

(if (my/macbookpro)
    (progn
      (setq ns-command-modifier 'meta)
      (setq insert-directory-program (executable-find "gls"))
      ;; Upgraded to El Capitan. Facing problem described here
      ;; http://stuff-things.net/2015/10/05/emacs-visible-bell-work-around-on-os-x-el-capitan/
      (setq visible-bell nil) ;; The default
      (setq ring-bell-function 'ignore)))
#+END_SRC

*** Define some useful constants
#+begin_src emacs-lisp
(defconst user-data-directory
  (expand-file-name "data/" user-emacs-directory))
#+end_src
*** Libraries

#+begin_src emacs-lisp
(use-package dash :ensure t)
(use-package diminish :ensure t)
#+end_src
*** Backups

This is one of the things people usually want to change right away. By default, Emacs saves backup files in the current directory. These are the files ending in =~= that are cluttering up your directory lists. The following code stashes them all in =~/.emacs.d/backups=, where I can find them with =C-x C-f= (=find-file=) if I really need to.

#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+end_src

Disk space is cheap. Save lots.

#+begin_src emacs-lisp
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src

*** Windows configuration
I am not a fan of tool bar as I prefer command line.

#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src

*** Time in the modeline

I like having the clock.

#+begin_src emacs-lisp
(display-time-mode 1)
#+end_src
*** Winner mode - undo and redo window configuration
winner-mode lets you use C-c <left> and C-c <right> to switch between window configurations. This is handy when something has popped up a buffer that you want to look at briefly before returning to whatever you were working on. When you're done, press C-c <left>.
#+begin_src emacs-lisp
(use-package winner
  :defer t)
#+end_src

*** Sentences end with a single space
#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src
*** I hate typing full 'yes', just 'y' is enough.
#+begin_src emacs-lisp
;; I hate typing full 'yes', just 'y' is enough.
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
*** Hide tool bar, scroll bar and menu bar
#+begin_src emacs-lisp
;; I don't need tool bar, scroll bar and menu bar
;; I get lots of real estate without them.
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
#+end_src

*** I not a fan of splash screen and startup message
#+begin_src emacs-lisp
;; I don't need splash screen everytime
(setq inhibit-splash-screen t)

;; Don't show the startup screen
(setq inhibit-startup-message t)
#+end_src
*** No tabs, only space.
;; Not tabs only space.
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src
*** Syntax highlighting
#+begin_src emacs-lisp
;; Syntax highlighting is must
(setq global-font-lock-mode t)
#+end_src

*** Font settings
#+begin_src emacs-lisp
(defvar ha/fixed-font-family
  (cond
   ((x-list-fonts "Menlo")           "Menlo")
   ((x-list-fonts "IBM Plex Mono")   "IBM Plex Mono")
   ((x-list-fonts "Fira Code")       "Fira Code")
   ((x-list-fonts "Roboto Mono")     "Roboto Mono")
   ((x-list-fonts "Hack")            "Hack")
   ((x-list-fonts "Source Code Pro") "Source Code Pro")
   ((x-list-fonts "Anonymous Pro")   "Anonymous Pro")
   ((x-list-fonts "Hasklig")         "Hasklig")
   ((x-list-fonts "M+ 1mn")          "M+ 1mn"))
  "My fixed width font based on what is installed, `nil' if not defined.")

(defvar ha/variable-font-tuple
  (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
        ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
        ((x-list-fonts "Verdana")         '(:font "Verdana"))
        ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
        (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro.")))
  "My variable width font available to org-mode files and whatnot.")

(when ha/fixed-font-family
  (set-frame-font ha/fixed-font-family)
  (set-face-attribute 'default nil :font ha/fixed-font-family :height 150)
  (set-face-font 'default ha/fixed-font-family))
#+end_src
*** Use doom theme
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-dracula t)

  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

(use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode))

(use-package all-the-icons
  :ensure t)
#+end_src
*** Helm - Interactive completion
#+begin_src emacs-lisp

(use-package helm
  :ensure t
  :diminish helm-mode
  :init
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 100)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                        ; reeeelatively quickly.
          helm-yas-display-key-on-candidate t
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
    (setq helm-delete-minibuffer-contents-from-point t)
    (setq helm-ff-file-name-history-use-recentf t)
    (setq helm-ff-search-library-in-sexp t)
    (setq helm-ff-skip-boring-files t)
    (setq helm-ls-git-show-abs-or-relative (quote relative))
    (setq helm-quick-update t)
    (setq helm-recentf-fuzzy-match t)
    (setq helm-M-x-fuzzy-match t)
    (setq helm-for-files-preferred-list
          (quote
           (helm-source-files-in-current-dir helm-source-recentf helm-source-bookmarks helm-source-file-cache helm-source-buffers-list helm-source-locate helm-source-ls-git))))
  :bind (("C-c h" . helm-mini)
         ("C-h a" . helm-apropos)
         ;; ("C-x C-b" . helm-buffers-list)
         ;; ("C-x b" . helm-buffers-list)
         ("M-y" . helm-show-kill-ring)
         ("M-x" . helm-M-x)
         ("C-x f" . counsel-recentf)
         ("C-x c o" . helm-occur)
         ("C-x c s" . helm-swoop)
         ("C-x c y" . helm-yas-complete)
         ("C-x c Y" . helm-yas-create-snippet-on-region)
         ("C-x c b" . my/helm-do-grep-book-notes)
         ("C-x c SPC" . helm-all-mark-rings))
  :config
  (use-package helm-ls-git
    :ensure t))
(ido-mode -1) ;; Turn off ido mode in case I enabled it accidentally

(use-package helm-descbinds
  :ensure t
  :bind ("C-h b" . helm-descbinds)
  :init
  (fset 'describe-bindings 'helm-descbinds)
  :config
  (require 'helm-config))
#+end_src
*** Undo tree mode - visualize your undos and branches

People often struggle with the Emacs undo model, where there's really no concept of "redo" - you simply undo the undo.
#
This lets you use =C-x u= (=undo-tree-visualize=) to visually walk through the changes you've made, undo back to a certain point (or redo), and go down different branches.

#+begin_src emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)))
#+end_src
*** Persistent scratch
#+begin_src emacs-lisp
(use-package persistent-scratch
  :ensure t
  :init
  (progn
    (setq persistent-scratch-save-file (expand-file-name ".persistent-scratch" user-data-directory))
    (persistent-scratch-setup-default)))
#+end_src
*** Server start
#+begin_src emacs-lisp
(server-start)
#+end_src
*** EDITOR environment variable
#+begin_src emacs-lisp
(setenv "EDITOR" "emacsclient")
#+end_src
*** Edit server
#+begin_src emacs-lisp
(use-package edit-server
  :ensure t
  :config (setq edit-server-new-frame nil)
  :init
  (progn
    (setq edit-server-port 10202)
    (edit-server-start)))
#+end_src
*** Help - which-key
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :diminish which-key-mode
  :init
  (which-key-mode))
#+end_src emacs-lisp
*** GnuPG
#+begin_src emacs-lisp
;; add allow-emacs-pinentry to ~/.gnupg/gpg-agent.conf
;; and restart gpg-agent
(use-package pinentry
  :ensure t
  :init (setq epa-pinentry-mode 'loopback)
  :config (pinentry-start))
#+end_src
** Navigation
*** Kill whole line or region
#+begin_src emacs-lisp
(use-package whole-line-or-region
  :ensure t
  :diminish whole-line-or-region-local-mode
  :init (whole-line-or-region-global-mode))
#+end_src
*** Show paren
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src
*** Pop to mark
#+begin_src emacs-lisp
(bind-key "C-x p" 'pop-to-mark-command)
(setq set-mark-command-repeat-pop t)
#+end_src
*** Smartscan
#+begin_src emacs-lisp
(use-package smartscan
  :defer t
  :ensure t
  :config (global-smartscan-mode t))
#+end_src
*** Helm-swoop - quickly finding lines
#+begin_src emacs-lisp
(use-package helm-swoop
 :ensure t
 :bind
 (("C-S-s" . helm-swoop)
  ("M-s s" . helm-swoop)
  ("M-s M-s" . helm-swoop)
  ("M-I" . helm-swoop-back-to-last-point)
  ("C-c M-i" . helm-multi-swoop)
  ("C-x M-i" . helm-multi-swoop-all)
  )
)
#+end_src
*** Avy - Qickly move around buffer
#+begin_src emacs-lisp
(use-package avy
  :ensure t
  :bind
  (("C-:" . avy-goto-char)
   ("M-g g" . avy-goto-line)
   ("M-g e" . avy-goto-word-0)
   ("M-g w" . avy-goto-word-1)))
#+end_src
*** Bookmarks
#+begin_src emacs-lisp
(setq bookmark-default-file (concat user-data-directory "bookmarks"))
#+end_src
*** More window movement
#+begin_src emacs-lisp
(use-package switch-window
  :ensure t
  :bind (("C-x o" . switch-window)))
#+end_src
** Coding
*** Scala
#+begin_src emacs-lisp
(use-package ensime
  :ensure t
  :pin melpa-stable
  :init (setq ensime-startup-snapshot-notification nil
              ensime-startup-notification nil)
  )

(use-package sbt-mode
  :pin melpa)

(use-package scala-mode
  :pin melpa)

(defun noorul/ensime-sbt-do-assembly ()
  (interactive)
  (sbt-command "assembly"))

(define-key ensime-mode-map (kbd "C-c C-b a") 'noorul/ensime-sbt-do-assembly)
(define-key ensime-mode-map (kbd "C-c C-b h") 'sbt-hydra)
#+end_src
** Startup
 #+begin_src emacs-lisp
 (org-agenda "" "c")
 (if (my/macbookpro)
     (progn
       (toggle-frame-fullscreen)
       (toggle-frame-fullscreen)))
 #+end_src
