#+TITLE: Noorul Islam's Emacs configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: showeverything
#+PROPERTY: header-args:emacs-lisp :tangle "~/.emacs.d/noorul.el"

* Configuration
** About this file
This is my personal configuration. Most of the configurations are re-used from
other sources. I tried my best to credit them via comments and links but I might
have missed some.

My =~/.emacs.d/init.el= is now a symlink to =noorul.el=, which is what =M-x
org-babel-tangle= (=C-c C-v t=) produces.
** Starting up
#+begin_src emacs-lisp
;;;; Starting up
(package-initialize)
(setq use-package-always-ensure t)
(add-to-list 'load-path "~/code.orgmode.org/bzg/org-mode/lisp")
(add-to-list 'load-path "~/code.orgmode.org/bzg/org-mode/contrib/lisp")
(setq custom-file "~/.emacs.d/custom-settings.el")
(load custom-file t)
#+end_src
** Personal information
#+begin_src emacs-lisp
(setq user-full-name "Noorul Islam K M"
      user-mail-address "noorul@noorul.com")
#+end_src

** Emacs initialization
*** Add package sources
 #+begin_src emacs-lisp
 (unless (assoc-default "melpa" package-archives)
   (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
   )
 (unless (assoc-default "melpa-stable" package-archives)
   (add-to-list 'package-archives
		'("melpa-stable" . "https://stable.melpa.org/packages/") t)
   )
 #+end_src
*** Setup use-package
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-verbose t)
(setq use-package-always-ensure t)
(require 'use-package)
(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+end_src

** General configuration
*** Reload

#+begin_src emacs-lisp
(defun my/reload-emacs-configuration ()
  (interactive)
  (load-file "~/.emacs.d/init.el"))
#+end_src
*** UTF-8

From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html

#+begin_src
(setenv "LC_ALL" "en_US.UTF-8")
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src
*** Define some useful constants
#+begin_src emacs-lisp
(defconst user-data-directory
  (expand-file-name "data/" user-emacs-directory))
#+end_src
*** Libraries

#+begin_src emacs-lisp
(use-package dash :ensure t)
(use-package diminish :ensure t)
#+end_src
*** Backups

This is one of the things people usually want to change right away. By default, Emacs saves backup files in the current directory. These are the files ending in =~= that are cluttering up your directory lists. The following code stashes them all in =~/.emacs.d/backups=, where I can find them with =C-x C-f= (=find-file=) if I really need to.

#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+end_src

Disk space is cheap. Save lots.

#+begin_src emacs-lisp
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src

*** Windows configuration
I am not a fan of tool bar as I prefer command line.

#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src

*** Time in the modeline

I like having the clock.

#+begin_src emacs-lisp
(display-time-mode 1)
#+end_src
*** Winner mode - undo and redo window configuration
winner-mode lets you use C-c <left> and C-c <right> to switch between window configurations. This is handy when something has popped up a buffer that you want to look at briefly before returning to whatever you were working on. When you're done, press C-c <left>.
#+begin_src
(use-package winner
  :defer t)
#+end_src

*** Sentences end with a single space
#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src
*** I hate typing full 'yes', just 'y' is enough.
#+begin_src emacs-lisp
;; I hate typing full 'yes', just 'y' is enough.
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
*** Hide tool bar, scroll bar and menu bar
#+begin_src emacs-lisp
;; I don't need tool bar, scroll bar and menu bar
;; I get lots of real estate without them.
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
#+end_src

*** I not a fan of splash screen and startup message
#+begin_src emacs-lisp
;; I don't need splash screen everytime
(setq inhibit-splash-screen t)

;; Don't show the startup screen
(setq inhibit-startup-message t)
#+end_src
*** No tabs, only space.
;; Not tabs only space.
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src
*** Syntax highlighting
#+begin_src emacs-lisp
;; Syntax highlighting is must
(setq global-font-lock-mode t)
#+end_src

*** Font settings
#+begin_src emacs-lisp
(defvar ha/fixed-font-family
  (cond
   ((x-list-fonts "Menlo")           "Menlo")
   ((x-list-fonts "IBM Plex Mono")   "IBM Plex Mono")
   ((x-list-fonts "Fira Code")       "Fira Code")
   ((x-list-fonts "Roboto Mono")     "Roboto Mono")
   ((x-list-fonts "Hack")            "Hack")
   ((x-list-fonts "Source Code Pro") "Source Code Pro")
   ((x-list-fonts "Anonymous Pro")   "Anonymous Pro")
   ((x-list-fonts "Hasklig")         "Hasklig")
   ((x-list-fonts "M+ 1mn")          "M+ 1mn"))
  "My fixed width font based on what is installed, `nil' if not defined.")

(defvar ha/variable-font-tuple
  (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
        ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
        ((x-list-fonts "Verdana")         '(:font "Verdana"))
        ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
        (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro.")))
  "My variable width font available to org-mode files and whatnot.")

(when ha/fixed-font-family
  (set-frame-font ha/fixed-font-family)
  (set-face-attribute 'default nil :font ha/fixed-font-family :height 150)
  (set-face-font 'default ha/fixed-font-family))
#+end_src
*** Color theme
#+begin_src emacs-lisp
(use-package color-theme-sanityinc-tomorrow
  :ensure t)

(if (or (eq window-system 'x) (eq window-system 'mac))
    (progn

      (defun org-src-color-blocks-light ()
        "Colors the block headers and footers to make them stand out more for lighter themes"
        (interactive)
        (custom-set-faces
         '(org-block-begin-line
          ((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))
         '(org-block-background
           ((t (:background "#FFFFEA"))))
         '(org-block
           ((t (:background "#FFFFEA"))))
         '(org-block-end-line
           ((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))))

      (defun org-src-color-blocks-dark ()
        "Colors the block headers and footers to make them stand out more for dark themes"
        (interactive)
        (custom-set-faces
         '(org-block-begin-line
           ((t (:foreground "#008ED1" :background "#002E41"))))
         '(org-block-background
           ((t (:background "#000000"))))
         '(org-block
           ((t (:background "#000000"))))
         '(org-block-end-line
           ((t (:foreground "#008ED1" :background "#002E41"))))))


      (deftheme ha/org-theme "Sub-theme to beautify org mode")

      (defun ha/change-theme (theme org-block-style)
        "Changes the color scheme and reset the mode line."
        (load-theme theme t)
        (funcall org-block-style)

        (let* ((ha/fixed-font-tuple (list :font ha/fixed-font-family))
               ; (ha/varible-font-tuple (list :font ha/variable-font-family))
               (base-font-color     (face-foreground 'default nil 'default))
               (background-color    (face-background 'default nil 'default))
               (primary-color       (face-foreground 'mode-line nil))
               (secondary-color     (face-background 'secondary-selection nil 'region))
               (base-height         (face-attribute 'default :height))
               (headline           `(:inherit default :weight bold :foreground ,base-font-color)))

          (when ha/fixed-font-family
            (set-frame-font ha/fixed-font-family)
            (set-face-attribute 'default nil :font ha/fixed-font-family :height 150)
            (set-face-font 'default ha/fixed-font-family))

          ;; Noticeable?
          ;; (set-face-attribute 'region nil :background "#ffff50" :foreground "black")
          ;; Subtle?
          (set-face-attribute 'region nil :background "#0000bb" :foreground 'unspecified)

          (custom-theme-set-faces 'ha/org-theme
                                  `(org-agenda-structure ((t (:inherit default :height 2.0 :underline nil))))
                                  `(org-verbatim ((t (:inherit 'fixed-pitched :foreground "#aef"))))
                                  `(org-table ((t (:inherit 'fixed-pitched))))
                                  `(org-block ((t (:inherit 'fixed-pitched))))
                                  `(org-block-background ((t (:inherit 'fixed-pitched))))
                                  `(org-block-begin-line ((t (:inherit 'fixed-pitched))))
                                  `(org-block-end-line ((t (:inherit 'fixed-pitched))))
                                  `(org-level-8 ((t (,@headline ,@ha/variable-font-tuple))))
                                  `(org-level-7 ((t (,@headline ,@ha/variable-font-tuple))))
                                  `(org-level-6 ((t (,@headline ,@ha/variable-font-tuple))))
                                  `(org-level-5 ((t (,@headline ,@ha/variable-font-tuple))))
                                  `(org-level-4 ((t (,@headline ,@ha/variable-font-tuple
                                                                :height 1.1))))
                                  `(org-level-3 ((t (,@headline ,@ha/variable-font-tuple
                                                                :height 1.25))))
                                  `(org-level-2 ((t (,@headline ,@ha/variable-font-tuple
                                                                :height 1.75))))
                                  `(org-level-1 ((t (,@headline ,@ha/variable-font-tuple
                                                                :height 2.1))))
                                  `(org-document-title ((t (,@headline ,@ha/variable-font-tuple :height 1.5 :underline nil)))))))

      (ha/change-theme 'sanityinc-tomorrow-night 'org-src-color-blocks-dark)

      (custom-set-faces
       '(mode-line           ((t (:background "blue4"   :foreground "gray90"))))
       '(mode-line-inactive  ((t (:background "#404045" :foreground "gray60"))))
       '(mode-line-buffer-id ((t (                      :foreground "gold1"   :weight ultra-bold))))
       '(which-func          ((t (                      :foreground "orange"))))
       '(show-paren-match    ((t (:background "default" :foreground "#afa"    :weight ultra-bold))))
       '(show-paren-mismatch ((t (:background "default" :foreground "#cc6666" :weight ultra-bold)))))

      (set-face-attribute 'region nil :background "#00a")))

#+end_src
*** Helm - Interactive completion
#+begin_src emacs-lisp

(use-package helm
  :ensure t
  :diminish helm-mode
  :init
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 100)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                        ; reeeelatively quickly.
          helm-yas-display-key-on-candidate t
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
    (setq helm-delete-minibuffer-contents-from-point t)
    (setq helm-ff-file-name-history-use-recentf t)
    (setq helm-ff-search-library-in-sexp t)
    (setq helm-ff-skip-boring-files t)
    (setq helm-ls-git-show-abs-or-relative (quote relative))
    (setq helm-quick-update t)
    (setq helm-recentf-fuzzy-match t)
    (setq helm-M-x-fuzzy-match t)
    (setq helm-for-files-preferred-list
          (quote
           (helm-source-files-in-current-dir helm-source-recentf helm-source-bookmarks helm-source-file-cache helm-source-buffers-list helm-source-locate helm-source-ls-git))))
  :bind (("C-c h" . helm-mini)
         ("C-h a" . helm-apropos)
         ;; ("C-x C-b" . helm-buffers-list)
         ;; ("C-x b" . helm-buffers-list)
         ("M-y" . helm-show-kill-ring)
         ("M-x" . helm-M-x)
         ("C-x f" . counsel-recentf)
         ("C-x c o" . helm-occur)
         ("C-x c s" . helm-swoop)
         ("C-x c y" . helm-yas-complete)
         ("C-x c Y" . helm-yas-create-snippet-on-region)
         ("C-x c b" . my/helm-do-grep-book-notes)
         ("C-x c SPC" . helm-all-mark-rings))
  :config
  (use-package helm-ls-git
    :ensure t))
(ido-mode -1) ;; Turn off ido mode in case I enabled it accidentally

(use-package helm-descbinds
  :ensure t
  :bind ("C-h b" . helm-descbinds)
  :init
  (fset 'describe-bindings 'helm-descbinds)
  :config
  (require 'helm-config))
#+end_src
*** Undo tree mode - visualize your undos and branches

People often struggle with the Emacs undo model, where there's really no concept of "redo" - you simply undo the undo.
#
This lets you use =C-x u= (=undo-tree-visualize=) to visually walk through the changes you've made, undo back to a certain point (or redo), and go down different branches.

#+begin_src emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)))
#+end_src
*** Persistent scratch
#+begin_src emacs-lisp
(use-package persistent-scratch
  :ensure t
  :init
  (progn
    (setq persistent-scratch-save-file (expand-file-name ".persistent-scratch" user-data-directory))
    (persistent-scratch-setup-default)))
#+end_src
*** Server start
#+begin_src emacs-lisp
(server-start)
#+end_src
*** EDITOR environment variable
#+begin_src emacs-lisp
(setenv "EDITOR" "emacsclient")
#+end_src
*** Edit server
#+begin_src emacs-lisp
(use-package edit-server
  :ensure t
  :config (setq edit-server-new-frame nil)
  :init
  (progn
    (setq edit-server-port 10202)
    (edit-server-start)))
#+end_src
*** Help - which-key
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :diminish which-key-mode
  :init
  (which-key-mode))
#+end_src emacs-lisp
*** GnuPG
#+begin_src emacs-lisp
;; add allow-emacs-pinentry to ~/.gnupg/gpg-agent.conf
;; and restart gpg-agent
(use-package pinentry
  :ensure t
  :init (setq epa-pinentry-mode 'loopback)
  :config (pinentry-start))
#+end_src
** Startup
#+begin_src emacs-lisp
(org-agenda nil " ")
(if (system-is-mac)
    (progn
      (toggle-frame-fullscreen)
      (toggle-frame-fullscreen)))
#+end_src
