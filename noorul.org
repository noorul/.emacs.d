#+TITLE: Noorul Islam's Emacs configuration
#+OPTIONS: toc:4 h:4
#+STARTUP: showeverything
#+PROPERTY: header-args:emacs-lisp :tangle "~/.emacs.d/noorul.el"

* Configuration
** About this file
This is my personal configuration. Most of the configurations are re-used from
other sources. I tried my best to credit them via comments and links but I might
have missed some.

My =~/.emacs.d/init.el= is now a symlink to =noorul.el=, which is what =M-x
org-babel-tangle= (=C-c C-v t=) produces.
** Starting up
#+begin_src emacs-lisp
;;;; Starting up
(package-initialize)
(setq use-package-always-ensure t)
(add-to-list 'load-path "~/code.orgmode.org/bzg/org-mode/lisp")
(add-to-list 'load-path "~/code.orgmode.org/bzg/org-mode/contrib/lisp")
(setq custom-file "~/.emacs.d/custom-settings.el")
(load custom-file t)
#+end_src
** System information
#+begin_src emacs-lisp
(defun my/macbookpro ()
  (interactive)
  (string-equal system-type "darwin"))
#+end_src
** Personal information
#+begin_src emacs-lisp
(setq user-full-name "Noorul Islam K M"
      user-mail-address "noorul@noorul.com")
#+end_src

** Emacs initialization
*** Add package sources
 #+begin_src emacs-lisp
 (unless (assoc-default "melpa" package-archives)
   (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
   )
 (unless (assoc-default "melpa-stable" package-archives)
   (add-to-list 'package-archives
		'("melpa-stable" . "https://stable.melpa.org/packages/") t)
   )
 #+end_src
*** Setup use-package
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-verbose t)
(setq use-package-always-ensure t)
(require 'use-package)
(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
#+end_src

** General configuration
*** Reload

#+begin_src emacs-lisp
(defun my/reload-emacs-configuration ()
  (interactive)
  (load-file "~/.emacs.d/init.el"))
#+end_src
*** UTF-8

From http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html

#+begin_src
(setenv "LC_ALL" "en_US.UTF-8")
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src
*** Mac OS X specific configuration
#+BEGIN_SRC emacs-lisp
(require 'cl)
(use-package exec-path-from-shell
  :ensure t)

(when (memq window-system '(mac ns))
  (require 'exec-path-from-shell)
  (exec-path-from-shell-initialize))

(if (my/macbookpro)
    (progn
      (setq ns-command-modifier 'meta)
      (setq insert-directory-program (executable-find "gls"))
      ;; Upgraded to El Capitan. Facing problem described here
      ;; http://stuff-things.net/2015/10/05/emacs-visible-bell-work-around-on-os-x-el-capitan/
      (setq visible-bell nil) ;; The default
      (setq ring-bell-function 'ignore)))
#+END_SRC

*** Define some useful constants
#+begin_src emacs-lisp
(defconst user-data-directory
  (expand-file-name "data/" user-emacs-directory))
#+end_src
*** Libraries

#+begin_src emacs-lisp
(use-package dash :ensure t)
(use-package diminish :ensure t)
#+end_src
*** Backups

This is one of the things people usually want to change right away. By default, Emacs saves backup files in the current directory. These are the files ending in =~= that are cluttering up your directory lists. The following code stashes them all in =~/.emacs.d/backups=, where I can find them with =C-x C-f= (=find-file=) if I really need to.

#+begin_src emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
#+end_src

Disk space is cheap. Save lots.

#+begin_src emacs-lisp
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src

*** Windows configuration
I am not a fan of tool bar as I prefer command line.

#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src

*** Time in the modeline

I like having the clock.

#+begin_src emacs-lisp
(display-time-mode 1)
#+end_src
*** Winner mode - undo and redo window configuration
winner-mode lets you use C-c <left> and C-c <right> to switch between window configurations. This is handy when something has popped up a buffer that you want to look at briefly before returning to whatever you were working on. When you're done, press C-c <left>.
#+begin_src emacs-lisp
(use-package winner
  :defer t)
#+end_src

*** Sentences end with a single space
#+begin_src emacs-lisp
(setq sentence-end-double-space nil)
#+end_src
*** I hate typing full 'yes', just 'y' is enough.
#+begin_src emacs-lisp
;; I hate typing full 'yes', just 'y' is enough.
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
*** Hide tool bar, scroll bar and menu bar
#+begin_src emacs-lisp
;; I don't need tool bar, scroll bar and menu bar
;; I get lots of real estate without them.
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
#+end_src

*** I not a fan of splash screen and startup message
#+begin_src emacs-lisp
;; I don't need splash screen everytime
(setq inhibit-splash-screen t)

;; Don't show the startup screen
(setq inhibit-startup-message t)
#+end_src
*** No tabs, only space.
;; Not tabs only space.
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
#+end_src
*** Syntax highlighting
#+begin_src emacs-lisp
;; Syntax highlighting is must
(setq global-font-lock-mode t)
#+end_src

*** Font settings
#+begin_src emacs-lisp
(defvar ha/fixed-font-family
  (cond
   ((x-list-fonts "Menlo")           "Menlo")
   ((x-list-fonts "IBM Plex Mono")   "IBM Plex Mono")
   ((x-list-fonts "Fira Code")       "Fira Code")
   ((x-list-fonts "Roboto Mono")     "Roboto Mono")
   ((x-list-fonts "Hack")            "Hack")
   ((x-list-fonts "Source Code Pro") "Source Code Pro")
   ((x-list-fonts "Anonymous Pro")   "Anonymous Pro")
   ((x-list-fonts "Hasklig")         "Hasklig")
   ((x-list-fonts "M+ 1mn")          "M+ 1mn"))
  "My fixed width font based on what is installed, `nil' if not defined.")

(defvar ha/variable-font-tuple
  (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
        ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
        ((x-list-fonts "Verdana")         '(:font "Verdana"))
        ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
        (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro.")))
  "My variable width font available to org-mode files and whatnot.")

(when ha/fixed-font-family
  (set-frame-font ha/fixed-font-family)
  (set-face-attribute 'default nil :font ha/fixed-font-family :height 150)
  (set-face-font 'default ha/fixed-font-family))
#+end_src
*** Use doom theme
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-dracula t)

  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
  (doom-themes-treemacs-config)

  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

(use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode))

(use-package all-the-icons
  :ensure t)
#+end_src
*** Helm - Interactive completion
#+begin_src emacs-lisp

(use-package helm
  :ensure t
  :diminish helm-mode
  :init
  (progn
    (require 'helm-config)
    (setq helm-candidate-number-limit 100)
    ;; From https://gist.github.com/antifuchs/9238468
    (setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
          helm-input-idle-delay 0.01  ; this actually updates things
                                        ; reeeelatively quickly.
          helm-yas-display-key-on-candidate t
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
    (setq helm-delete-minibuffer-contents-from-point t)
    (setq helm-ff-file-name-history-use-recentf t)
    (setq helm-ff-search-library-in-sexp t)
    (setq helm-ff-skip-boring-files t)
    (setq helm-ls-git-show-abs-or-relative (quote relative))
    (setq helm-quick-update t)
    (setq helm-recentf-fuzzy-match t)
    (setq helm-M-x-fuzzy-match t)
    (setq helm-for-files-preferred-list
          (quote
           (helm-source-files-in-current-dir helm-source-recentf helm-source-bookmarks helm-source-file-cache helm-source-buffers-list helm-source-locate helm-source-ls-git))))
  :bind (("C-c h" . helm-mini)
         ("C-h a" . helm-apropos)
         ;; ("C-x C-b" . helm-buffers-list)
         ;; ("C-x b" . helm-buffers-list)
         ("M-y" . helm-show-kill-ring)
         ("M-x" . helm-M-x)
         ("C-x f" . counsel-recentf)
         ("C-x c o" . helm-occur)
         ("C-x c s" . helm-swoop)
         ("C-x c y" . helm-yas-complete)
         ("C-x c Y" . helm-yas-create-snippet-on-region)
         ("C-x c b" . my/helm-do-grep-book-notes)
         ("C-x c SPC" . helm-all-mark-rings))
  :config
  (use-package helm-ls-git
    :ensure t))
(ido-mode -1) ;; Turn off ido mode in case I enabled it accidentally

(use-package helm-descbinds
  :ensure t
  :bind ("C-h b" . helm-descbinds)
  :init
  (fset 'describe-bindings 'helm-descbinds)
  :config
  (require 'helm-config))
#+end_src
*** Undo tree mode - visualize your undos and branches

People often struggle with the Emacs undo model, where there's really no concept of "redo" - you simply undo the undo.
#
This lets you use =C-x u= (=undo-tree-visualize=) to visually walk through the changes you've made, undo back to a certain point (or redo), and go down different branches.

#+begin_src emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (progn
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-timestamps t)
    (setq undo-tree-visualizer-diff t)))
#+end_src
*** Persistent scratch
#+begin_src emacs-lisp
(use-package persistent-scratch
  :ensure t
  :init
  (progn
    (setq persistent-scratch-save-file (expand-file-name ".persistent-scratch" user-data-directory))
    (persistent-scratch-setup-default)))
#+end_src
*** Server start
#+begin_src emacs-lisp
(server-start)
#+end_src
*** EDITOR environment variable
#+begin_src emacs-lisp
(setenv "EDITOR" "emacsclient")
#+end_src
*** Edit server
#+begin_src emacs-lisp
(use-package edit-server
  :ensure t
  :config (setq edit-server-new-frame nil)
  :init
  (progn
    (setq edit-server-port 10202)
    (edit-server-start)))
#+end_src
*** Help - which-key
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :diminish which-key-mode
  :init
  (which-key-mode))
#+end_src emacs-lisp
*** GnuPG
#+begin_src emacs-lisp
;; add allow-emacs-pinentry to ~/.gnupg/gpg-agent.conf
;; and restart gpg-agent
(use-package pinentry
  :ensure t
  :init (setq epa-pinentry-mode 'loopback)
  :config (pinentry-start))
#+end_src
** Navigation
*** Kill whole line or region
#+begin_src emacs-lisp
(use-package whole-line-or-region
  :ensure t
  :diminish whole-line-or-region-local-mode
  :init (whole-line-or-region-global-mode))
#+end_src
*** Show paren
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src
*** Pop to mark
#+begin_src emacs-lisp
(bind-key "C-x p" 'pop-to-mark-command)
(setq set-mark-command-repeat-pop t)
#+end_src
*** Smartscan
#+begin_src emacs-lisp
(use-package smartscan
  :defer t
  :ensure t
  :config (global-smartscan-mode t))
#+end_src
*** Helm-swoop - quickly finding lines
#+begin_src emacs-lisp
(use-package helm-swoop
 :ensure t
 :bind
 (("C-S-s" . helm-swoop)
  ("M-s s" . helm-swoop)
  ("M-s M-s" . helm-swoop)
  ("M-I" . helm-swoop-back-to-last-point)
  ("C-c M-i" . helm-multi-swoop)
  ("C-x M-i" . helm-multi-swoop-all)
  )
)
#+end_src
*** Avy - Qickly move around buffer
#+begin_src emacs-lisp
(use-package avy
  :ensure t
  :bind
  (("C-:" . avy-goto-char)
   ("M-g g" . avy-goto-line)
   ("M-g e" . avy-goto-word-0)
   ("M-g w" . avy-goto-word-1)))
#+end_src
*** Bookmarks
#+begin_src emacs-lisp
(setq bookmark-default-file (concat user-data-directory "bookmarks"))
#+end_src
*** More window movement
#+begin_src emacs-lisp
(use-package switch-window
  :ensure t
  :bind (("C-x o" . switch-window)))
#+end_src
*** Recent files
#+begin_src emacs-lisp
(require 'recentf)
(setq recentf-max-saved-items 200
      recentf-max-menu-items 15)
(recentf-mode)
#+end_src
*** Copy filename to clipboard

http://emacsredux.com/blog/2013/03/27/copy-filename-to-the-clipboard/
https://github.com/bbatsov/prelude

#+begin_src emacs-lisp
(defun prelude-copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
#+end_src

*** Dired-X
#+begin_src emacs-lisp
(require 'dired-x)
#+end_src
** Org
*** Getting started with org-mode
**** Org-mode setup
 #+begin_src emacs-lisp
 ;;;
 ;;; Org Mode
 ;;;
 (use-package org
   :diminish "org-mode")

 ;; Only .org and .org_archive files carry this mode
 (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\)$" . org-mode))
 ;;
 ;; Standard key bindings
 (global-set-key "\C-cl" 'org-store-link)
 (global-set-key "\C-ca" 'org-agenda)
 (global-set-key "\C-cb" 'org-iswitchb)
 #+end_src

**** Org bullets
 #+begin_src emacs-lisp
 (use-package org-bullets
    :ensure t
    :init (add-hook 'org-mode-hook 'org-bullets-mode))
 #+end_src
**** Load necessary org modules
 #+begin_src emacs-lisp
 ;; Load org modules
 (setq org-modules (quote (org-bbdb
                           org-bibtex
                           org-crypt
                           org-gnus
                           org-id
                           org-info
                           org-jsinfo
                           org-habit
                           org-inlinetask
                           org-irc
                           org-mew
                           org-mhe
                           org-protocol
                           org-rmail
                           org-vm
                           org-wl
                           org-w3m)))
 (use-package ob-http
   :ensure)

 (use-package ob-async
   :ensure)

 (org-reload)
 #+end_src

**** Agenda Setup
 #+begin_src emacs-lisp
 ;; Every .org file under ~/git/personal/notebook should be part of agenda.
 (setq org-agenda-files (quote ("~/bitbucket.org/noorul/personal/notebook")))
 #+end_src

*** Tasks and States
**** TODO keywords
 #+begin_src emacs-lisp
 (setq org-todo-keywords
       (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
               (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

 (setq org-todo-keyword-faces
       (quote (("TODO" :foreground "red" :weight bold)
               ("NEXT" :foreground "blue" :weight bold)
               ("DONE" :foreground "forest green" :weight bold)
               ("WAITING" :foreground "orange" :weight bold)
               ("HOLD" :foreground "magenta" :weight bold)
               ("CANCELLED" :foreground "forest green" :weight bold)
               ("MEETING" :foreground "forest green" :weight bold)
               ("PHONE" :foreground "forest green" :weight bold))))
 #+end_src

**** Fast todo selection
 #+begin_src emacs-lisp
 (setq org-use-fast-todo-selection t)

 (setq org-treat-S-cursor-todo-selection-as-state-change nil)
 #+end_src
**** TODO state triggers
 #+begin_src emacs-lisp
 (setq org-todo-state-tags-triggers
       (quote (("CANCELLED" ("CANCELLED" . t))
               ("WAITING" ("WAITING" . t))
               ("HOLD" ("WAITING") ("HOLD" . t))
               (done ("WAITING") ("HOLD"))
               ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
               ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
               ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
 #+end_src

*** Adding new tasks quickly with org capture
**** Capture templates
 #+begin_src emacs-lisp
 (setq org-directory "~/bitbucket.org/noorul/personal/notebook")
 (setq org-default-notes-file "~/bitbucket.org/noorul/personal/notebook/organizer.org")

 ;; I use C-c r to start capture mode
 (global-set-key (kbd "C-c r") 'org-capture)

 (setq noorul/refile-target "~/bitbucket.org/noorul/personal/notebook/organizer.org")

 ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
 (setq org-capture-templates
       (quote (("t" "todo" entry (file+headline noorul/refile-target "Tasks")
                "* TODO %?\n%U\n%a\n  %i" :clock-in t :clock-resume t)
               ("r" "respond" entry (file+headline noorul/refile-target "Tasks")
                "* TODO Respond to %:from on %:subject\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
               ("n" "Notes" entry (file+datetree noorul/refile-target)
                "* %? :NOTE:\n%U\n%a\n  %i" :clock-in t :clock-resume t)
               ("j" "Journal" entry (file+datetree noorul/refile-target)
                "* %?\n%U\n  %i" :clock-in t :clock-resume t)
               ("w" "org-protocol" entry (file noorul/refile-target)
                "* TODO Review %c\n%U\n  %i" :immediate-finish t)
               ("m" "Meeting" entry (file noorul/refile-target)
                "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
               ("p" "Phone call" entry (file+datetree noorul/refile-target)
                "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
               ("c" "Contacts" entry (file "~/bitbucket.org/noorul/personal/notebook/contacts.org")
                "* %(org-contacts-template-name)
 :PROPERTIES:
 :EMAIL: %(org-contacts-template-email)
 :END:")
               ("h" "Habit" entry (file "~/bitbucket.org/noorul/personal/notebook/routines.org")
                "* NEXT %?\n%U\n%a\nSCHEDULED: %t .+1d/3d\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))

 ;; Remove empty LOGBOOK drawers on clock out
 (defun bh/remove-empty-drawer-on-clock-out ()
   (interactive)
   (save-excursion
     (beginning-of-line 0)
     (org-remove-empty-drawer-at (point))))

 (add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)

 #+end_src
*** Refiling tasks
**** Refile setup
 #+begin_src emacs-lisp
 ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
 (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                  (org-agenda-files :maxlevel . 9))))

 ; Use full outline paths for refile targets - we file directly with IDO
 (setq org-refile-use-outline-path t)

 ; Targets complete directly with IDO
 (setq org-outline-path-complete-in-steps nil)

 ; Allow refile to create parent tasks with confirmation
 (setq org-refile-allow-creating-parent-nodes (quote confirm))

 ; Use IDO for both buffer and file completion and ido-everywhere to t
 ;; (setq org-completion-use-ido t)
 ;; (setq ido-everywhere t)
 ;; (setq ido-max-directory-size 100000)
 ;; (ido-mode (quote both))

 ;;;; Refile settings
 ; Exclude DONE state tasks from refile targets
 (defun bh/verify-refile-target ()
   "Exclude todo keywords with a done state from refile targets"
   (not (member (nth 2 (org-heading-components)) org-done-keywords)))

 (setq org-refile-target-verify-function 'bh/verify-refile-target)

 #+end_src

*** Custom agenda views
**** Setup
 #+begin_src emacs-lisp
 ;; Do not dim blocked tasks
 (setq org-agenda-dim-blocked-tasks t)

 ;; Compact the block agenda view
 (setq org-agenda-compact-blocks t)

 ;; Custom agenda command definitions
 (setq org-agenda-custom-commands
       (quote (("N" "Notes" tags "NOTE"
                ((org-agenda-overriding-header "Notes")
                 (org-tags-match-list-sublevels t)))
               ("h" "Habits" tags-todo "STYLE=\"habit\""
                ((org-agenda-overriding-header "Habits")
                 (org-agenda-sorting-strategy
                  '(todo-state-down effort-up category-keep))))
               ("w" "Work" tags "work")
               ("c" "Agenda"
                ((agenda "" nil)
                 (tags "REFILE"
                       ((org-agenda-overriding-header "Tasks to Refile")
                        (org-tags-match-list-sublevels nil)))
                 (tags-todo "-CANCELLED/!"
                            ((org-agenda-overriding-header "Stuck Projects")
                             (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                             (org-agenda-sorting-strategy
                              '(category-keep))))
                 (tags-todo "-HOLD-CANCELLED/!"
                            ((org-agenda-overriding-header "Projects")
                             (org-agenda-skip-function 'bh/skip-non-projects)
                             (org-tags-match-list-sublevels 'indented)
                             (org-agenda-sorting-strategy
                              '(category-keep))))
                 (tags-todo "-CANCELLED/!NEXT"
                            ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                                   (if bh/hide-scheduled-and-waiting-next-tasks
                                                                       ""
                                                                     " (including WAITING and SCHEDULED tasks)")))
                             (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                             (org-tags-match-list-sublevels t)
                             (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                             (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                             (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                             (org-agenda-sorting-strategy
                              '(todo-state-down effort-up category-keep))))
                 (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                            ((org-agenda-overriding-header (concat "Project Subtasks"
                                                                   (if bh/hide-scheduled-and-waiting-next-tasks
                                                                       ""
                                                                     " (including WAITING and SCHEDULED tasks)")))
                             (org-agenda-skip-function 'bh/skip-non-project-tasks)
                             (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                             (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                             (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                             (org-agenda-sorting-strategy
                              '(category-keep))))
                 (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                            ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                                   (if bh/hide-scheduled-and-waiting-next-tasks
                                                                       ""
                                                                     " (including WAITING and SCHEDULED tasks)")))
                             (org-agenda-skip-function 'bh/skip-project-tasks)
                             (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                             (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                             (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                             (org-agenda-sorting-strategy
                              '(category-keep))))
                 (tags-todo "-CANCELLED+WAITING|HOLD/!"
                            ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                                   (if bh/hide-scheduled-and-waiting-next-tasks
                                                                       ""
                                                                     " (including WAITING and SCHEDULED tasks)")))
                             (org-agenda-skip-function 'bh/skip-non-tasks)
                             (org-tags-match-list-sublevels nil)
                             (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                             (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)))
                 (tags "-REFILE/"
                       ((org-agenda-overriding-header "Tasks to Archive")
                        (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                        (org-tags-match-list-sublevels nil))))
                nil))))
 #+end_src

**** Filtering
 #+begin_src emacs-lisp
 (defun bh/org-auto-exclude-function (tag)
   "Automatic task exclusion in the agenda with / RET"
   (and (cond
         ((string= tag "hold")
          t)
         ((string= tag "farm")
          t))
        (concat "-" tag)))

 (setq org-agenda-auto-exclude-function 'bh/org-auto-exclude-function)

 #+end_src

*** Time clocking
**** Clock setup
 #+begin_src emacs-lisp
 ;;
 ;; Resume clocking task when emacs is restarted
 (org-clock-persistence-insinuate)
 ;;
 ;; Show lot of clocking history so it's easy to pick items off the C-F11 list
 (setq org-clock-history-length 23)
 ;; Resume clocking task on clock-in if the clock is open
 (setq org-clock-in-resume t)
 ;; Change tasks to NEXT when clocking in
 (setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
 ;; Separate drawers for clocking and logs
 (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
 ;; Save clock data and state changes and notes in the LOGBOOK drawer
 (setq org-clock-into-drawer t)
 ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
 (setq org-clock-out-remove-zero-time-clocks t)
 ;; Clock out when moving task to a done state
 (setq org-clock-out-when-done t)
 ;; Save the running clock and all clock history when exiting Emacs, load it on startup
 (setq org-clock-persist t)
 ;; Do not prompt to resume an active clock
 (setq org-clock-persist-query-resume nil)
 ;; Enable auto clock resolution for finding open clocks
 (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
 ;; Include current clocking task in clock reports
 (setq org-clock-report-include-clocking-task t)

 (setq bh/keep-clock-running nil)

 (defun bh/clock-in-to-next (kw)
   "Switch a task from TODO to NEXT when clocking in.
 Skips capture tasks, projects, and subprojects.
 Switch projects and subprojects from NEXT back to TODO"
   (when (not (and (boundp 'org-capture-mode) org-capture-mode))
     (cond
      ((and (member (org-get-todo-state) (list "TODO"))
            (bh/is-task-p))
       "NEXT")
      ((and (member (org-get-todo-state) (list "NEXT"))
            (bh/is-project-p))
       "TODO"))))

 (defun bh/find-project-task ()
   "Move point to the parent (project) task if any"
   (save-restriction
     (widen)
     (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
       (while (org-up-heading-safe)
         (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
           (setq parent-task (point))))
       (goto-char parent-task)
       parent-task)))

 (defun bh/punch-in (arg)
   "Start continuous clocking and set the default task to the
 selected task.  If no task is selected set the Organization task
 as the default task."
   (interactive "p")
   (setq bh/keep-clock-running t)
   (if (equal major-mode 'org-agenda-mode)
       ;;
       ;; We're in the agenda
       ;;
       (let* ((marker (org-get-at-bol 'org-hd-marker))
              (tags (org-with-point-at marker (org-get-tags-at))))
         (if (and (eq arg 4) tags)
             (org-agenda-clock-in '(16))
           (bh/clock-in-organization-task-as-default)))
     ;;
     ;; We are not in the agenda
     ;;
     (save-restriction
       (widen)
       ; Find the tags on the current task
       (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
           (org-clock-in '(16))
         (bh/clock-in-organization-task-as-default)))))

 (defun bh/punch-out ()
   (interactive)
   (setq bh/keep-clock-running nil)
   (when (org-clock-is-active)
     (org-clock-out))
   (org-agenda-remove-restriction-lock))

 (defun bh/clock-in-default-task ()
   (save-excursion
     (org-with-point-at org-clock-default-task
       (org-clock-in))))

 (defun bh/clock-in-parent-task ()
   "Move point to the parent (project) task if any and clock in"
   (let ((parent-task))
     (save-excursion
       (save-restriction
         (widen)
         (while (and (not parent-task) (org-up-heading-safe))
           (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
             (setq parent-task (point))))
         (if parent-task
             (org-with-point-at parent-task
               (org-clock-in))
           (when bh/keep-clock-running
             (bh/clock-in-default-task)))))))

 (defvar bh/organization-task-id "eb155a82-92b2-4f25-a3c6-0304591af2f9")

 (defun bh/clock-in-organization-task-as-default ()
   (interactive)
   (org-with-point-at (org-id-find bh/organization-task-id 'marker)
     (org-clock-in '(16))))

 (defun bh/clock-out-maybe ()
   (when (and bh/keep-clock-running
              (not org-clock-clocking-in)
              (marker-buffer org-clock-default-task)
              (not org-clock-resolving-clocks-due-to-idleness))
     (bh/clock-in-parent-task)))

 (add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

 (require 'org-id)
 (defun bh/clock-in-task-by-id (id)
   "Clock in a task by id"
   (org-with-point-at (org-id-find id 'marker)
     (org-clock-in nil)))

 (defun bh/clock-in-last-task (arg)
   "Clock in the interrupted task if there is one
 Skip the default task and get the next one.
 A prefix arg forces clock in of the default task."
   (interactive "p")
   (let ((clock-in-to-task
          (cond
           ((eq arg 4) org-clock-default-task)
           ((and (org-clock-is-active)
                 (equal org-clock-default-task (cadr org-clock-history)))
            (caddr org-clock-history))
           ((org-clock-is-active) (cadr org-clock-history))
           ((equal org-clock-default-task (car org-clock-history)) (cadr org-clock-history))
           (t (car org-clock-history)))))
     (widen)
     (org-with-point-at clock-in-to-task
       (org-clock-in nil))))
 #+end_src

**** Editing clock entries
 #+begin_src emacs-lisp
 (setq org-time-stamp-rounding-minutes (quote (1 1)))


 (setq org-agenda-clock-consistency-checks
       (quote (:max-duration "4:00"
                             :min-duration 0
                             :max-gap 0
                             :gap-ok-around ("4:00"))))

 #+end_src

*** Time reporting and tracking

**** Verify That The Clock Data Is Complete And Correct
 #+begin_src emacs-lisp
 (setq org-clock-out-remove-zero-time-clocks t)
 #+end_src
**** Using Clock Reports To Summarize Time Spent
 #+begin_src emacs-lisp
 ;; Agenda clock report parameters
 (setq org-agenda-clockreport-parameter-plist
       (quote (:link t :maxlevel 5 :fileskip0 t :compact t :narrow 80)))
 #+end_src
**** Creating A Task Estimate With Column Mode
 #+begin_src emacs-lisp
 ; Set default column view headings: Task Effort Clock_Summary
 (setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")

 ; global Effort estimate values
 ; global STYLE property values for completion
 (setq org-global-properties (quote (("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
                                     ("STYLE_ALL" . "habit"))))

 #+end_src

**** Providing progress report to others
 #+begin_src emacs-lisp
 ;; Agenda log mode items to display (closed and state changes by default)
 (setq org-agenda-log-mode-items (quote (state)))
 #+end_src

*** Tags
 #+begin_src emacs-lisp
 ; Tags with fast selection keys
 (setq org-tag-alist '(("@work" . ?o)
                       ("@home" . ?h)
                       ("@writing" . ?w)
                       ("@errands" . ?e)
                       ("@drawing" . ?d)
                       ("@coding" . ?c)
                       ("@phone" . ?p)
                       ("@reading" . ?r)
                       ("@computer" . ?l)
                       ("quantified" . ?q)))

 ; Allow setting single tags without the menu
 (setq org-fast-tag-selection-single-key (quote expert))

 ; For tag searches ignore tasks with scheduled and deadline dates
 (setq org-agenda-tags-todo-honor-ignore-options t)

 #+end_src
*** GTD stuff
**** Weekly review
 #+begin_src emacs-lisp
 (setq org-agenda-span 'day)
 #+end_src
**** Project definition and finding stuck projects
 #+begin_src emacs-lisp
 (setq org-stuck-projects (quote ("" nil nil "")))

 (defun bh/is-project-p ()
   "Any task with a todo keyword subtask"
   (save-restriction
     (widen)
     (let ((has-subtask)
           (subtree-end (save-excursion (org-end-of-subtree t)))
           (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
       (save-excursion
         (forward-line 1)
         (while (and (not has-subtask)
                     (< (point) subtree-end)
                     (re-search-forward "^\*+ " subtree-end t))
           (when (member (org-get-todo-state) org-todo-keywords-1)
             (setq has-subtask t))))
       (and is-a-task has-subtask))))

 (defun bh/is-project-subtree-p ()
   "Any task with a todo keyword that is in a project subtree.
 Callers of this function already widen the buffer view."
   (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                               (point))))
     (save-excursion
       (bh/find-project-task)
       (if (equal (point) task)
           nil
         t))))

 (defun bh/is-task-p ()
   "Any task with a todo keyword and no subtask"
   (save-restriction
     (widen)
     (let ((has-subtask)
           (subtree-end (save-excursion (org-end-of-subtree t)))
           (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
       (save-excursion
         (forward-line 1)
         (while (and (not has-subtask)
                     (< (point) subtree-end)
                     (re-search-forward "^\*+ " subtree-end t))
           (when (member (org-get-todo-state) org-todo-keywords-1)
             (setq has-subtask t))))
       (and is-a-task (not has-subtask)))))

 (defun bh/is-subproject-p ()
   "Any task which is a subtask of another project"
   (let ((is-subproject)
         (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
     (save-excursion
       (while (and (not is-subproject) (org-up-heading-safe))
         (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
           (setq is-subproject t))))
     (and is-a-task is-subproject)))

 (defun bh/list-sublevels-for-projects-indented ()
   "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
   This is normally used by skipping functions where this variable is already local to the agenda."
   (if (marker-buffer org-agenda-restrict-begin)
       (setq org-tags-match-list-sublevels 'indented)
     (setq org-tags-match-list-sublevels nil))
   nil)

 (defun bh/list-sublevels-for-projects ()
   "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
   This is normally used by skipping functions where this variable is already local to the agenda."
   (if (marker-buffer org-agenda-restrict-begin)
       (setq org-tags-match-list-sublevels t)
     (setq org-tags-match-list-sublevels nil))
   nil)

 (defvar bh/hide-scheduled-and-waiting-next-tasks t)

 (defun bh/toggle-next-task-display ()
   (interactive)
   (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
   (when  (equal major-mode 'org-agenda-mode)
     (org-agenda-redo))
   (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

 (defun bh/skip-stuck-projects ()
   "Skip trees that are not stuck projects"
   (save-restriction
     (widen)
     (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
       (if (bh/is-project-p)
           (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                  (has-next ))
             (save-excursion
               (forward-line 1)
               (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                 (unless (member "WAITING" (org-get-tags-at))
                   (setq has-next t))))
             (if has-next
                 nil
               next-headline)) ; a stuck project, has subtasks but no next task
         nil))))

 (defun bh/skip-non-stuck-projects ()
   "Skip trees that are not stuck projects"
   ;; (bh/list-sublevels-for-projects-indented)
   (save-restriction
     (widen)
     (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
       (if (bh/is-project-p)
           (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                  (has-next ))
             (save-excursion
               (forward-line 1)
               (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                 (unless (member "WAITING" (org-get-tags-at))
                   (setq has-next t))))
             (if has-next
                 next-headline
               nil)) ; a stuck project, has subtasks but no next task
         next-headline))))

 (defun bh/skip-non-projects ()
   "Skip trees that are not projects"
   ;; (bh/list-sublevels-for-projects-indented)
   (if (save-excursion (bh/skip-non-stuck-projects))
       (save-restriction
         (widen)
         (let ((subtree-end (save-excursion (org-end-of-subtree t))))
           (cond
            ((bh/is-project-p)
             nil)
            ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
             nil)
            (t
             subtree-end))))
     (save-excursion (org-end-of-subtree t))))

 (defun bh/skip-project-trees-and-habits ()
   "Skip trees that are projects"
   (save-restriction
     (widen)
     (let ((subtree-end (save-excursion (org-end-of-subtree t))))
       (cond
        ((bh/is-project-p)
         subtree-end)
        ((org-is-habit-p)
         subtree-end)
        (t
         nil)))))

 (defun bh/skip-projects-and-habits-and-single-tasks ()
   "Skip trees that are projects, tasks that are habits, single non-project tasks"
   (save-restriction
     (widen)
     (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
       (cond
        ((org-is-habit-p)
         next-headline)
        ((and bh/hide-scheduled-and-waiting-next-tasks
              (member "WAITING" (org-get-tags-at)))
         next-headline)
        ((bh/is-project-p)
         next-headline)
        ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
         next-headline)
        (t
         nil)))))

 (defun bh/skip-project-tasks-maybe ()
   "Show tasks related to the current restriction.
 When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
 When not restricted, skip project and sub-project tasks, habits, and project related tasks."
   (save-restriction
     (widen)
     (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
            (next-headline (save-excursion (or (outline-next-heading) (point-max))))
            (limit-to-project (marker-buffer org-agenda-restrict-begin)))
       (cond
        ((bh/is-project-p)
         next-headline)
        ((org-is-habit-p)
         subtree-end)
        ((and (not limit-to-project)
              (bh/is-project-subtree-p))
         subtree-end)
        ((and limit-to-project
              (bh/is-project-subtree-p)
              (member (org-get-todo-state) (list "NEXT")))
         subtree-end)
        (t
         nil)))))

 (defun bh/skip-project-tasks ()
   "Show non-project tasks.
 Skip project and sub-project tasks, habits, and project related tasks."
   (save-restriction
     (widen)
     (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
       (cond
        ((bh/is-project-p)
         subtree-end)
        ((org-is-habit-p)
         subtree-end)
        ((bh/is-project-subtree-p)
         subtree-end)
        (t
         nil)))))

 (defun bh/skip-non-project-tasks ()
   "Show project tasks.
 Skip project and sub-project tasks, habits, and loose non-project tasks."
   (save-restriction
     (widen)
     (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
            (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
       (cond
        ((bh/is-project-p)
         next-headline)
        ((org-is-habit-p)
         subtree-end)
        ((and (bh/is-project-subtree-p)
              (member (org-get-todo-state) (list "NEXT")))
         subtree-end)
        ((not (bh/is-project-subtree-p))
         subtree-end)
        (t
         nil)))))

 (defun bh/skip-projects-and-habits ()
   "Skip trees that are projects and tasks that are habits"
   (save-restriction
     (widen)
     (let ((subtree-end (save-excursion (org-end-of-subtree t))))
       (cond
        ((bh/is-project-p)
         subtree-end)
        ((org-is-habit-p)
         subtree-end)
        (t
         nil)))))

 (defun bh/skip-non-subprojects ()
   "Skip trees that are not projects"
   (let ((next-headline (save-excursion (outline-next-heading))))
     (if (bh/is-subproject-p)
         nil
       next-headline)))
 #+end_src
*** Archiving
**** Archive setup
 #+begin_src emacs-lisp
 (setq org-archive-mark-done nil)
 (setq org-archive-location "%s_archive::* Archived Tasks")

 (defun bh/skip-non-archivable-tasks ()
   "Skip trees that are not available for archiving"
   (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
     ;; Consider only tasks with done todo headings as archivable candidates
     (if (member (org-get-todo-state) org-done-keywords)
         (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                (daynr (string-to-number (format-time-string "%d" (current-time))))
                (an-year-ago (* 26 60 60 24 (+ daynr 1)))
                (time-difference (time-subtract
                                  (current-time)
                                  (seconds-to-time an-year-ago)))
                (last-year (- (string-to-number
                               (format-time-string "%Y"
                                                   (current-time))) 1))

                (last-month (string-to-number
                             (format-time-string "%m" (current-time))))
                (my-pair)
                (dates-string
                 (do
                     ((count 0 (+ 1 count))
                      (ret-string ""))
                     ((> count 12) ret-string)
                   (setq my-pair (calendar-increment-month-cons count last-month
                                                                last-year))
                   (if (> 10 (car my-pair))
                       (setq ret-string (concat ret-string
                                                (format "%d-0%d-"
                                                        (cdr
                                                         my-pair)
                                                        (car my-pair))))
                     (setq ret-string (concat ret-string
                                              (format "%d-%d-"
                                                      (cdr
                                                       my-pair)
                                                      (car my-pair)))))
                   (if (<= count 11)
                       (setq ret-string (concat ret-string "\\|")))))
                (subtree-is-current (save-excursion
                                      (forward-line 1)
                                      (and (< (point) subtree-end)
                                           (re-search-forward dates-string
                                                              subtree-end
                                                              t)))))
           (if subtree-is-current
               next-headline ; Has a date in this month or last month, skip it
             nil))  ; available to archive
       (or next-headline (point-max)))))

 #+end_src
*** Org babel module for elasticsearch
 #+BEGIN_SRC emacs-lisp
   (use-package es-mode
     :ensure t)
 #+END_SRC
*** Org babel setup
 #+begin_src emacs-lisp
 (org-babel-do-load-languages
  (quote org-babel-load-languages)
  (quote ((emacs-lisp . t)
          (dot . t)
          (sql . t)
          (calc . t)
          (ditaa . t)
          (R . t)
          (python . t)
          (ruby . t)
          (gnuplot . t)
          (clojure . t)
          (shell . t)
          (ledger . t)
          (org . t)
          (scala . t)
          (plantuml . t)
          (latex . t)
          (elasticsearch . t)
          (restclient . t)
 )))

 ; Do not prompt to confirm evaluation
 ; This may be dangerous - make sure you understand the consequences
 ; of setting this -- see the docstring for details
 ;; (setq org-confirm-babel-evaluate nil)

 ; Use fundamental mode when editing plantuml blocks with C-c '
 (add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))

 ;; Don't enable this because it breaks access to emacs from my Android phone
 (setq org-startup-with-inline-images nil)

 #+end_src
*** Reminders
 #+begin_src emacs-lisp
 ; Erase all reminders and rebuilt reminders for today from the agenda
 (defun bh/org-agenda-to-appt ()
   (interactive)
   (setq appt-time-msg-list nil)
   (org-agenda-to-appt))

 ; Rebuild the reminders everytime the agenda is displayed
 (add-hook 'org-finalize-agenda-hook 'bh/org-agenda-to-appt 'append)

 ; This is at the end of my .emacs - so appointments are set up when Emacs starts
 (bh/org-agenda-to-appt)

 ; Activate appointments so we get notifications
 (appt-activate t)

 ; If we leave Emacs running overnight - reset the appointments one minute after midnight
 (run-at-time "24:01" nil 'bh/org-agenda-to-appt)

 #+end_src
*** Productivity
**** Abbrev-mode and skeletons
 #+begin_src emacs-lisp
 ;; Skeletons
 ;;
 ;; sblk - Generic block #+begin_FOO .. #+end_FOO
 (define-skeleton skel-org-block
   "Insert an org block, querying for type."
   "Type: "
   "#+begin_" str "\n"
   _ - \n
   "#+end_" str "\n")

 (define-abbrev org-mode-abbrev-table "sblk" "" 'skel-org-block)


 ;; selisp - Emacs Lisp source block
 (define-skeleton skel-org-block-elisp
   "Insert a org emacs-lisp block"
   ""
   "#+begin_src emacs-lisp\n"
   _ - \n
   "#+end_src\n")

 (define-abbrev org-mode-abbrev-table "selisp" "" 'skel-org-block-elisp)

 #+end_src
**** Narrowing to subtree
 #+begin_src emacs-lisp
 (global-set-key (kbd "<f5>") 'bh/org-todo)

 (defun bh/org-todo (arg)
   (interactive "p")
   (if (equal arg 4)
       (save-restriction
         (bh/narrow-to-org-subtree)
         (org-show-todo-tree nil))
     (bh/narrow-to-org-subtree)
     (org-show-todo-tree nil)))

 (global-set-key (kbd "<S-f5>") 'bh/widen)

 (defun bh/widen ()
   (interactive)
   (if (equal major-mode 'org-agenda-mode)
       (progn
         (org-agenda-remove-restriction-lock)
         (when org-agenda-sticky
           (org-agenda-redo)))
     (widen)))

 (add-hook 'org-agenda-mode-hook
           '(lambda () (org-defkey org-agenda-mode-map "W" (lambda () (interactive) (setq bh/hide-scheduled-and-waiting-next-tasks t) (bh/widen))))
           'append)

 (defun bh/restrict-to-file-or-follow (arg)
   "Set agenda restriction to 'file or with argument invoke follow mode.
 I don't use follow mode very often but I restrict to file all the time
 so change the default 'F' binding in the agenda to allow both"
   (interactive "p")
   (if (equal arg 4)
       (org-agenda-follow-mode)
     (widen)
     (bh/set-agenda-restriction-lock 4)
     (org-agenda-redo)
     (beginning-of-buffer)))

 (add-hook 'org-agenda-mode-hook
           '(lambda () (org-defkey org-agenda-mode-map "F" 'bh/restrict-to-file-or-follow))
           'append)

 (defun bh/narrow-to-org-subtree ()
   (widen)
   (org-narrow-to-subtree)
   (save-restriction
     (org-agenda-set-restriction-lock)))

 (defun bh/narrow-to-subtree ()
   (interactive)
   (if (equal major-mode 'org-agenda-mode)
       (progn
         (org-with-point-at (org-get-at-bol 'org-hd-marker)
           (bh/narrow-to-org-subtree))
         (when org-agenda-sticky
           (org-agenda-redo)))
     (bh/narrow-to-org-subtree)))

 (add-hook 'org-agenda-mode-hook
           '(lambda () (org-defkey org-agenda-mode-map "N" 'bh/narrow-to-subtree))
           'append)

 (defun bh/narrow-up-one-org-level ()
   (widen)
   (save-excursion
     (outline-up-heading 1 'invisible-ok)
     (bh/narrow-to-org-subtree)))

 (defun bh/get-pom-from-agenda-restriction-or-point ()
   (or (and (marker-position org-agenda-restrict-begin) org-agenda-restrict-begin)
       (org-get-at-bol 'org-hd-marker)
       (and (equal major-mode 'org-mode) (point))
       org-clock-marker))

 (defun bh/narrow-up-one-level ()
   (interactive)
   (if (equal major-mode 'org-agenda-mode)
       (progn
         (org-with-point-at (bh/get-pom-from-agenda-restriction-or-point)
           (bh/narrow-up-one-org-level))
         (org-agenda-redo))
     (bh/narrow-up-one-org-level)))

 (add-hook 'org-agenda-mode-hook
           '(lambda () (org-defkey org-agenda-mode-map "U" 'bh/narrow-up-one-level))
           'append)

 (defun bh/narrow-to-org-project ()
   (widen)
   (save-excursion
     (bh/find-project-task)
     (bh/narrow-to-org-subtree)))

 (defun bh/narrow-to-project ()
   (interactive)
   (if (equal major-mode 'org-agenda-mode)
       (progn
         (org-with-point-at (bh/get-pom-from-agenda-restriction-or-point)
           (bh/narrow-to-org-project)
           (save-excursion
             (bh/find-project-task)
             (org-agenda-set-restriction-lock)))
         (org-agenda-redo)
         (beginning-of-buffer))
     (bh/narrow-to-org-project)
     (save-restriction
       (org-agenda-set-restriction-lock))))

 (add-hook 'org-agenda-mode-hook
           '(lambda () (org-defkey org-agenda-mode-map "P" 'bh/narrow-to-project))
           'append)

 (defvar bh/project-list nil)

 (defun bh/view-next-project ()
   (interactive)
   (let (num-project-left current-project)
     (unless (marker-position org-agenda-restrict-begin)
       (goto-char (point-min))
       ; Clear all of the existing markers on the list
       (while bh/project-list
         (set-marker (pop bh/project-list) nil))
       (re-search-forward "Tasks to Refile")
       (forward-visible-line 1))

     ; Build a new project marker list
     (unless bh/project-list
       (while (< (point) (point-max))
         (while (and (< (point) (point-max))
                     (or (not (org-get-at-bol 'org-hd-marker))
                         (org-with-point-at (org-get-at-bol 'org-hd-marker)
                           (or (not (bh/is-project-p))
                               (bh/is-project-subtree-p)))))
           (forward-visible-line 1))
         (when (< (point) (point-max))
           (add-to-list 'bh/project-list (copy-marker (org-get-at-bol 'org-hd-marker)) 'append))
         (forward-visible-line 1)))

     ; Pop off the first marker on the list and display
     (setq current-project (pop bh/project-list))
     (when current-project
       (org-with-point-at current-project
         (setq bh/hide-scheduled-and-waiting-next-tasks nil)
         (bh/narrow-to-project))
       ; Remove the marker
       (setq current-project nil)
       (org-agenda-redo)
       (beginning-of-buffer)
       (setq num-projects-left (length bh/project-list))
       (if (> num-projects-left 0)
           (message "%s projects left to view" num-projects-left)
         (beginning-of-buffer)
         (setq bh/hide-scheduled-and-waiting-next-tasks t)
         (error "All projects viewed.")))))

 (add-hook 'org-agenda-mode-hook
           '(lambda () (org-defkey org-agenda-mode-map "V" 'bh/view-next-project))
           'append)

 (setq org-show-entry-below (quote ((default))))
 #+end_src

**** Limiting agenda to a subtree
 #+begin_src emacs-lisp
 (add-hook 'org-agenda-mode-hook
           '(lambda () (org-defkey org-agenda-mode-map "\C-c\C-x<" 'bh/set-agenda-restriction-lock))
           'append)

 (defun bh/set-agenda-restriction-lock (arg)
   "Set restriction lock to current task subtree or file if prefix is specified"
   (interactive "p")
   (let* ((pom (bh/get-pom-from-agenda-restriction-or-point))
          (tags (org-with-point-at pom (org-get-tags-at))))
     (let ((restriction-type (if (equal arg 4) 'file 'subtree)))
       (save-restriction
         (cond
          ((and (equal major-mode 'org-agenda-mode) pom)
           (org-with-point-at pom
             (org-agenda-set-restriction-lock restriction-type))
           (org-agenda-redo))
          ((and (equal major-mode 'org-mode) (org-before-first-heading-p))
           (org-agenda-set-restriction-lock 'file))
          (pom
           (org-with-point-at pom
             (org-agenda-set-restriction-lock restriction-type))))))))

 ;; Limit restriction lock highlighting to the headline only
 (setq org-agenda-restriction-lock-highlight-subtree nil)

 ;; Use sticky agenda's so they persist
 (setq org-agenda-sticky t)
 #+end_src

**** Highlighting current agenda line
 #+begin_src emacs-lisp
 ;; Always hilight the current agenda line
 (add-hook 'org-agenda-mode-hook
           '(lambda () (hl-line-mode 1))
           'append)

 ;; The following custom-set-faces create the highlights
 (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
  '(org-mode-line-clock ((t (:foreground "red" :box (:line-width -1 :style released-button)))) t))
 #+end_src
**** Keep tasks with timestamps visible on the global todo lists
 #+begin_src emacs-lisp
 ;; Keep tasks with dates on the global todo lists
 (setq org-agenda-todo-ignore-with-date nil)

 ;; Keep tasks with deadlines on the global todo lists
 (setq org-agenda-todo-ignore-deadlines nil)

 ;; Keep tasks with scheduled dates on the global todo lists
 (setq org-agenda-todo-ignore-scheduled nil)

 ;; Keep tasks with timestamps on the global todo lists
 (setq org-agenda-todo-ignore-timestamp nil)

 ;; Remove completed deadline tasks from the agenda view
 (setq org-agenda-skip-deadline-if-done t)

 ;; Remove completed scheduled tasks from the agenda view
 (setq org-agenda-skip-scheduled-if-done t)

 ;; Remove completed items from search results
 (setq org-agenda-skip-timestamp-if-done t)
 #+end_src

**** Use the diary for holidays and appointments
 #+begin_src emacs-lisp
 (setq org-agenda-include-diary nil)
 (setq org-agenda-diary-file "~/git/personal/notebook/organizer.org")
 (setq org-agenda-insert-diary-extract-time t)
 #+end_src
**** Searches include archive files
 #+begin_src emacs-lisp
 ;; Include agenda archive files when searching for things
 (setq org-agenda-text-search-extra-files (quote (agenda-archives)))
 #+end_src
**** Agenda view tweaks
 #+begin_src emacs-lisp
 ;; Show all future entries for repeating tasks
 (setq org-agenda-repeating-timestamp-show-all t)

 ;; Show all agenda dates - even if they are empty
 (setq org-agenda-show-all-dates t)

 ;; Sorting order for tasks on the agenda
 (setq org-agenda-sorting-strategy
       (quote ((agenda habit-down time-up user-defined-up effort-up category-keep)
               (todo category-up effort-up)
               (tags category-up effort-up)
               (search category-up))))

 ;; Start the weekly agenda on Monday
 (setq org-agenda-start-on-weekday 1)

 ;; Enable display of the time grid so we can see the marker for the current time
 (setq org-agenda-time-grid (quote ((daily today remove-match)
                                    (0900 1100 1300 1500 1700)
                                    "......"
                                    #("----------------" 0 16 (org-heading t))
                                    )))

 ;; Display tags farther right
 (setq org-agenda-tags-column -102)

 ;;
 ;; Agenda sorting functions
 ;;
 (setq org-agenda-cmp-user-defined 'bh/agenda-sort)

 (defun bh/agenda-sort (a b)
   "Sorting strategy for agenda items.
 Late deadlines first, then scheduled, then non-late deadlines"
   (let (result num-a num-b)
     (cond
      ; time specific items are already sorted first by org-agenda-sorting-strategy

      ; non-deadline and non-scheduled items next
      ((bh/agenda-sort-test 'bh/is-not-scheduled-or-deadline a b))

      ; deadlines for today next
      ((bh/agenda-sort-test 'bh/is-due-deadline a b))

      ; late deadlines next
      ((bh/agenda-sort-test-num 'bh/is-late-deadline '> a b))

      ; scheduled items for today next
      ((bh/agenda-sort-test 'bh/is-scheduled-today a b))

      ; late scheduled items next
      ((bh/agenda-sort-test-num 'bh/is-scheduled-late '> a b))

      ; pending deadlines last
      ((bh/agenda-sort-test-num 'bh/is-pending-deadline '< a b))

      ; finally default to unsorted
      (t (setq result nil)))
     result))

 (defmacro bh/agenda-sort-test (fn a b)
   "Test for agenda sort"
   `(cond
     ; if both match leave them unsorted
     ((and (apply ,fn (list ,a))
           (apply ,fn (list ,b)))
      (setq result nil))
     ; if a matches put a first
     ((apply ,fn (list ,a))
      (setq result -1))
     ; otherwise if b matches put b first
     ((apply ,fn (list ,b))
      (setq result 1))
     ; if none match leave them unsorted
     (t nil)))

 (defmacro bh/agenda-sort-test-num (fn compfn a b)
   `(cond
     ((apply ,fn (list ,a))
      (setq num-a (string-to-number (match-string 1 ,a)))
      (if (apply ,fn (list ,b))
          (progn
            (setq num-b (string-to-number (match-string 1 ,b)))
            (setq result (if (apply ,compfn (list num-a num-b))
                             -1
                           1)))
        (setq result -1)))
     ((apply ,fn (list ,b))
      (setq result 1))
     (t nil)))

 (defun bh/is-not-scheduled-or-deadline (date-str)
   (and (not (bh/is-deadline date-str))
        (not (bh/is-scheduled date-str))))

 (defun bh/is-due-deadline (date-str)
   (string-match "Deadline:" date-str))

 (defun bh/is-late-deadline (date-str)
   (string-match "\\([0-9]*\\) d\. ago:" date-str))

 (defun bh/is-pending-deadline (date-str)
   (string-match "In \\([^-]*\\)d\.:" date-str))

 (defun bh/is-deadline (date-str)
   (or (bh/is-due-deadline date-str)
       (bh/is-late-deadline date-str)
       (bh/is-pending-deadline date-str)))

 (defun bh/is-scheduled (date-str)
   (or (bh/is-scheduled-today date-str)
       (bh/is-scheduled-late date-str)))

 (defun bh/is-scheduled-today (date-str)
   (string-match "Scheduled:" date-str))

 (defun bh/is-scheduled-late (date-str)
   (string-match "Sched\.\\(.*\\)x:" date-str))

 ;; Use sticky agenda's so they persist
 (setq org-agenda-sticky t)
 #+end_src

**** Buries the agenda view buffer
 #+begin_src emacs-lisp
 (add-hook 'org-agenda-mode-hook
           (lambda ()
             (define-key org-agenda-mode-map "q" 'bury-buffer))
           'append)

 #+end_src
**** Checklist handling
 #+begin_src emacs-lisp
 (require 'org-checklist)
 #+end_src
**** Handling blocked tasts
 #+begin_src emacs-lisp
 (setq org-enforce-todo-dependencies t)
 #+end_src
**** Controlling display of leading stars on headlines
 #+begin_src emacs-lisp
 (setq org-hide-leading-stars nil)
 #+end_src
**** Org indent mode
 #+begin_src emacs-lisp
 (setq org-startup-indented t)
 #+end_src
**** Handling blank lines
 #+begin_src emacs-lisp
 (setq org-cycle-separator-lines 0)
 (setq org-blank-before-new-entry (quote ((heading)
                                          (plain-list-item . auto))))
 #+end_src
**** Adding new tasks quickly without disturbing the current task content
 #+begin_src emacs-lisp
 (setq org-insert-heading-respect-content nil)
 #+end_src
**** Notes at the top
 #+begin_src emacs-lisp
 (setq org-reverse-note-order nil)
 #+end_src
**** Searching and showing results
 #+begin_src emacs-lisp
 (setq org-show-following-heading t)
 (setq org-show-hierarchy-above t)
 (setq org-show-siblings (quote ((default))))
 #+end_src
**** Editing and special key handling
 #+begin_src emacs-lisp
 (setq org-special-ctrl-a/e 'reversed)
 (setq org-special-ctrl-k t)
 (setq org-yank-adjusted-subtrees t)
 #+end_src

**** Attachments
 #+begin_src emacs-lisp
 (setq org-id-method (quote uuidgen))
 #+end_src
**** Deadlines and agenda visibility
 #+begin_src emacs-lisp
 (setq org-deadline-warning-days 30)
 #+end_src
**** Exporting tables to CSV
 #+begin_src emacs-lisp
 (setq org-table-export-default-format "orgtbl-to-csv")
 #+end_src
**** Minimize emacs frames
 #+begin_src emacs-lisp
 (setq org-link-frame-setup (quote ((vm . vm-visit-folder)
                                    (gnus . org-gnus-no-new-news)
                                    (file . find-file))))

 ; Use the current window for C-c ' source editing
 (setq org-src-window-setup 'current-window)
 #+end_src
**** Logging stuff
 #+begin_src emacs-lisp
 (setq org-log-done (quote time))
 (setq org-log-into-drawer t)
 (setq org-log-state-notes-insert-after-drawers nil)
 #+end_src
**** Limiting time spent on tasks
 #+begin_src emacs-lisp
 (setq org-clock-sound nil)
 #+end_src
**** Habit tracking
 #+begin_src emacs-lisp
 ; position the habit graph on the agenda to the right of the default
 (setq org-habit-graph-column 50)

 (run-at-time "06:00" 86400 '(lambda () (setq org-habit-show-habits t)))
 #+end_src
**** Auto revert mode
 #+begin_src emacs-lisp
 (setq global-auto-revert-mode t)
 (add-hook 'dired-mode-hook 'auto-revert-mode)
 #+end_src
**** Speed commands
 #+begin_src emacs-lisp
 (setq org-use-speed-commands t)
 (setq org-speed-commands-user (quote (("0" . ignore)
                                       ("1" . ignore)
                                       ("2" . ignore)
                                       ("3" . ignore)
                                       ("4" . ignore)
                                       ("5" . ignore)
                                       ("6" . ignore)
                                       ("7" . ignore)
                                       ("8" . ignore)
                                       ("9" . ignore)

                                       ("a" . ignore)
                                       ("d" . ignore)
                                       ("h" . bh/hide-other)
                                       ("i" progn
                                        (forward-char 1)
                                        (call-interactively 'org-insert-heading-respect-content))
                                       ("k" . org-kill-note-or-show-branches)
                                       ("l" . ignore)
                                       ("m" . ignore)
                                       ("q" . bh/show-org-agenda)
                                       ("r" . ignore)
                                       ("s" . org-save-all-org-buffers)
                                       ("w" . org-refile)
                                       ("x" . ignore)
                                       ("y" . ignore)
                                       ("z" . org-add-note)

                                       ("A" . ignore)
                                       ("B" . ignore)
                                       ("E" . ignore)
                                       ("F" . bh/restrict-to-file-or-follow)
                                       ("G" . ignore)
                                       ("H" . ignore)
                                       ("J" . org-clock-goto)
                                       ("K" . ignore)
                                       ("L" . ignore)
                                       ("M" . ignore)
                                       ("N" . bh/narrow-to-subtree)
                                       ("P" . bh/narrow-to-project)
                                       ("Q" . ignore)
                                       ("R" . ignore)
                                       ("S" . ignore)
                                       ("T" . bh/org-todo)
                                       ("U" . bh/narrow-up-one-level)
                                       ("V" . ignore)
                                       ("W" . bh/widen)
                                       ("X" . ignore)
                                       ("Y" . ignore)
                                       ("Z" . ignore))))

 (defun bh/show-org-agenda ()
   (interactive)
   (if org-agenda-sticky
       (switch-to-buffer "*Org Agenda( )*")
     (switch-to-buffer "*Org Agenda*"))
   (delete-other-windows))
 #+end_src
**** Insert inactive timestamps and exclude from export
 #+begin_src emacs-lisp
 (defvar bh/insert-inactive-timestamp t)

 (defun bh/toggle-insert-inactive-timestamp ()
   (interactive)
   (setq bh/insert-inactive-timestamp (not bh/insert-inactive-timestamp))
   (message "Heading timestamps are %s" (if bh/insert-inactive-timestamp "ON" "OFF")))

 (defun bh/insert-inactive-timestamp ()
   (interactive)
   (org-insert-time-stamp nil t t nil nil nil))

 (defun bh/insert-heading-inactive-timestamp ()
   (save-excursion
     (when bh/insert-inactive-timestamp
       (org-return)
       (org-cycle)
       (bh/insert-inactive-timestamp))))

 (add-hook 'org-insert-heading-hook 'bh/insert-heading-inactive-timestamp
           'append)

 #+end_src
**** Return follow links
 #+begin_src emacs-lisp
 (setq org-return-follows-link t)
 #+end_src
**** Highlight clock when running overtime
 #+begin_src emacs-lisp
 (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
  '(org-mode-line-clock ((t (:foreground "red" :box (:line-width -1 :style released-button)))) t))
 #+end_src
**** Prepare meeting notes
 #+begin_src emacs-lisp
 (defun bh/prepare-meeting-notes ()
   "Prepare meeting notes for email
    Take selected region and convert tabs to spaces, mark TODOs with leading >>>, and copy to kill ring for pasting"
   (interactive)
   (let (prefix)
     (save-excursion
       (save-restriction
         (narrow-to-region (region-beginning) (region-end))
         (untabify (point-min) (point-max))
         (goto-char (point-min))
         (while (re-search-forward "^\\( *-\\\) \\(TODO\\|DONE\\): " (point-max) t)
           (replace-match (concat (make-string (length (match-string 1)) ?>) " " (match-string 2) ": ")))
         (goto-char (point-min))
         (kill-ring-save (point-min) (point-max))))))
 #+end_src
**** Highlight persist after changes.
 #+begin_src emacs-lisp
 (setq org-remove-highlights-with-change nil)
 #+end_src
**** Getting up to date org-mode info documentation
 #+begin_src emacs-lisp
 (add-to-list 'Info-default-directory-list "~/.emacs.d/site-lisp/org-mode/doc")
 #+end_src

**** Prefer future dates or not?
 #+begin_src emacs-lisp
 (setq org-read-date-prefer-future 'time)
 #+end_src
**** Automatically change list bullets
 #+begin_src emacs-lisp
 (setq org-list-demote-modify-bullet (quote (("+" . "-")
                                             ("*" . "-")
                                             ("1." . "-")
                                             ("1)" . "-")
                                             ("A)" . "-")
                                             ("B)" . "-")
                                             ("a)" . "-")
                                             ("b)" . "-")
                                             ("A." . "-")
                                             ("B." . "-")
                                             ("a." . "-")
                                             ("b." . "-"))))
 #+end_src
**** Remove indentation on agenda tags view
 #+begin_src emacs-lisp
 (setq org-tags-match-list-sublevels t)
 #+end_src
**** Agenda persistent filters
 #+begin_src emacs-lisp
 (setq org-agenda-persistent-filter t)
 #+end_src
**** Mail links open compose-mail
 #+begin_src emacs-lisp
 (setq org-link-mailto-program (quote (compose-mail "%a" "%s")))
 #+end_src

**** Using org-mime to email
 #+begin_src emacs-lisp
 (use-package org-mime
   :ensure t)
 (use-package htmlize
   :ensure t)
 #+end_src
**** Remove multiple state change log details from the agenda
 #+begin_src emacs-lisp
 (setq org-agenda-skip-additional-timestamps-same-entry t)
 #+end_src
**** Drop old style references in tables
 #+begin_src emacs-lisp
 (setq org-table-use-standard-references (quote from))
 #+end_src
**** Use system settings for file-application selection
 #+begin_src emacs-lisp
 (setq org-file-apps (quote ((auto-mode . emacs)
                             ("\\.mm\\'" . system)
                             ("\\.x?html?\\'" . system)
                             ("\\.pdf\\'" . system))))
 #+end_src
**** Use the current window for the agenda
 #+begin_src emacs-lisp
 ; Overwrite the current window with the agenda
 (setq org-agenda-window-setup 'current-window)
 #+end_src
**** Delete IDs when cloning
 #+begin_src emacs-lisp
 (setq org-clone-delete-id t)
 #+end_src
**** Cycling plain lists
 #+begin_src emacs-lisp
 (setq org-cycle-include-plain-lists t)
 #+end_src
**** Showing source block syntax highlighting
 #+begin_src emacs-lisp
 (setq org-src-fontify-natively t)
 #+end_src
**** Inserting structure template blocks
 #+begin_src emacs-lisp
 ;; (setq org-structure-template-alist
 ;;       (quote (("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")
 ;;               ("e" "#+begin_example\n?\n#+end_example" "<example>\n?\n</example>")
 ;;               ("q" "#+begin_quote\n?\n#+end_quote" "<quote>\n?\n</quote>")
 ;;               ("v" "#+begin_verse\n?\n#+end_verse" "<verse>\n?\n</verse>")
 ;;               ("c" "#+begin_center\n?\n#+end_center" "<center>\n?\n</center>")
 ;;               ("l" "#+begin_latex\n?\n#+end_latex" "<literal style=\"latex\">\n?\n</literal>")
 ;;               ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
 ;;               ("h" "#+begin_html\n?\n#+end_html" "<literal style=\"html\">\n?\n</literal>")
 ;;               ("H" "#+html: " "<literal style=\"html\">?</literal>")
 ;;               ("a" "#+begin_ascii\n?\n#+end_ascii")
 ;;               ("A" "#+ascii: ")
 ;;               ("i" "#+index: ?" "#+index: ?")
 ;;               ("I" "#+include %file ?" "<include file=%file markup=\"?\">"))))
 #+end_src

**** NEXT is for tasks
 #+begin_src emacs-lisp
 (defun bh/mark-next-parent-tasks-todo ()
   "Visit each parent task and change NEXT states to TODO"
   (let ((mystate (or (and (fboundp 'org-state)
                           state)
                      (nth 2 (org-heading-components)))))
     (when mystate
       (save-excursion
         (while (org-up-heading-safe)
           (when (member (nth 2 (org-heading-components)) (list "NEXT"))
             (org-todo "TODO")))))))

 (add-hook 'org-after-todo-state-change-hook 'bh/mark-next-parent-tasks-todo 'append)
 (add-hook 'org-clock-in-hook 'bh/mark-next-parent-tasks-todo 'append)
 #+end_src

**** Startup in folded view
 #+begin_src emacs-lisp
 (setq org-startup-folded t)
 #+end_src
**** Allow alphabetical list entries
 #+begin_src emacs-lisp
 (setq org-alphabetical-lists t)
 #+end_src

**** Using orgstruct mode for mail
 #+begin_src emacs-lisp
 (add-hook 'message-mode-hook 'orgstruct++-mode 'append)
 (add-hook 'message-mode-hook 'turn-on-auto-fill 'append)
 (add-hook 'message-mode-hook 'orgtbl-mode 'append)
 (add-hook 'message-mode-hook 'turn-on-flyspell 'append)
 (add-hook 'message-mode-hook
           '(lambda () (setq fill-column 72))
           'append)
 #+end_src

**** Using flyspell mode to reduce spelling errors
 #+begin_src emacs-lisp
 ;; flyspell mode for spell checking everywhere
 (add-hook 'org-mode-hook 'turn-on-flyspell 'append)

 ;; Disable keys in org-mode
 ;;    C-c [
 ;;    C-c ]
 ;;    C-c ;
 ;;    C-c C-x C-q  cancelling the clock (we never want this)
 (add-hook 'org-mode-hook
           '(lambda ()
              ;; Undefine C-c [ and C-c ] since this breaks my
              ;; org-agenda files when directories are include It
              ;; expands the files in the directories individually
              (org-defkey org-mode-map "\C-c[" 'undefined)
              (org-defkey org-mode-map "\C-c]" 'undefined)
              (org-defkey org-mode-map "\C-c;" 'undefined)
              (org-defkey org-mode-map "\C-c\C-x\C-q" 'undefined))
           'append)

 (add-hook 'org-mode-hook
           (lambda ()
             (local-set-key (kbd "C-c M-o") 'bh/mail-subtree))
           'append)

 (defun bh/mail-subtree ()
   (interactive)
   (org-mark-subtree)
   (org-mime-subtree))
 #+end_src

**** Task priorities
 #+begin_src emacs-lisp
 (setq org-enable-priority-commands nil)
 #+end_src

**** Preserving Source Block Indentation
 #+begin_src emacs-lisp
 (setq org-src-preserve-indentation nil)
 (setq org-edit-src-content-indentation 0)
 #+end_src

**** Prevent editing invisible text
 #+begin_src emacs-lisp
 (setq org-catch-invisible-edits 'error)
 #+end_src
**** Keep clock durations in hours
 #+begin_src emacs-lisp
 (setq org-time-clocksum-format
       '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))
 #+end_src
**** Contacts
 #+begin_src emacs-lisp
 (require 'org-contacts)
 (custom-set-variables
  '(org-contacts-files (quote ("~/git/personal/notebook/contacts.org")))
  '(calendar-mark-holidays-flag t))
 #+end_src
*** Automatic hourly commits
 #+begin_src emacs-lisp
 (run-at-time "00:59" 3600 'org-save-all-org-buffers)
 #+end_src
*** helm
 ;; Stolen from https://github.com/LeoUfimtsev/emacsconfig/blob/master/.emacs
 #+begin_src emacs-lisp
 (defun my/helm-multi-swoop-all-headings ()
   "Search only for headings across all files"
   (interactive)
   (helm-multi-swoop-all "\\* ")
   )
 #+end_src
*** worf-goto
 #+begin_src emacs-lisp
 ;; ——— WORF Utilities ———————————————————————————————————————————————————————————————
 ;; https://github.com/abo-abo/worf/blob/master/worf.el
 (defun worf--pretty-heading (str lvl)
   "Prettify heading STR or level LVL."
   (setq str (or str ""))
   (setq str (propertize str 'face (nth (1- lvl) org-level-faces)))
   (let (desc)
     (while (and (string-match org-bracket-link-regexp str)
                 (stringp (setq desc (match-string 3 str))))
       (setq str (replace-match
                  (propertize desc 'face 'org-link)
                  nil nil str)))
     str))

 (defun worf--pattern-transformer (x)
   "Transform X to make 1-9 select the heading level in `worf-goto'."
   (if (string-match "^[1-9]" x)
       (setq x (format "^%s" x))
     x))

 (defun worf-goto ()
   "Jump to a heading with `helm'."
   (interactive)
   (require 'helm-match-plugin)
   (let ((candidates
          (org-map-entries
           (lambda ()
             (let ((comp (org-heading-components))
                   (h (org-get-heading)))
               (cons (format "%d%s%s" (car comp)
                             (make-string (1+ (* 2 (1- (car comp)))) ?\ )
                             (if (get-text-property 0 'fontified h)
                                 h
                               (worf--pretty-heading (nth 4 comp) (car comp))))
                     (point))))))
         helm-update-blacklist-regexps
         helm-candidate-number-limit)
     (helm :sources
           `((name . "Headings")
             (candidates . ,candidates)
             (action . (lambda (x) (goto-char x)
                          (call-interactively 'show-branches)
                          (worf-more)))
             (pattern-transformer . worf--pattern-transformer)))))
 #+end_src
*** Helper functions
 #+begin_src emacs-lisp
 (defun bh/hide-other ()
   (interactive)
   (save-excursion
     (org-back-to-heading 'invisible-ok)
     (hide-other)
     (org-cycle)
     (org-cycle)
     (org-cycle)))

 (defun bh/set-truncate-lines ()
   "Toggle value of truncate-lines and refresh window display."
   (interactive)
   (setq truncate-lines (not truncate-lines))
   ;; now refresh window display (an idiom from simple.el):
   (save-excursion
     (set-window-start (selected-window)
                       (window-start (selected-window)))))

 (defun bh/make-org-scratch ()
   (interactive)
   (find-file "/tmp/publish/scratch.org")
   (gnus-make-directory "/tmp/publish"))

 (defun bh/switch-to-scratch ()
   (interactive)
   (switch-to-buffer "*scratch*"))
 #+end_src

*** COMMENT Display org-agenda if Emacs is idle for 5 minutes
 #+begin_src emacs-lisp
 (defun jump-to-org-agenda ()
   (interactive)
   (let ((buf (get-buffer "*Org Agenda*"))
         wind)
     (if buf
         (if (setq wind (get-buffer-window buf))
             (select-window wind)
           (if (called-interactively-p)
               (progn
                 (select-window (display-buffer buf t t))
                 (org-fit-window-to-buffer)
                 ;; (org-agenda-redo)
                 )
             (with-selected-window (display-buffer buf)
               (org-fit-window-to-buffer)
               ;; (org-agenda-redo)
               )))
       (call-interactively 'org-agenda-list)))
   ;;(let ((buf (get-buffer "*Calendar*")))
   ;;  (unless (get-buffer-window buf)
   ;;    (org-agenda-goto-calendar)))
   )

 (run-with-idle-timer 300 t 'jump-to-org-agenda)

 #+end_src
*** Publishing
 #+begin_src emacs-lisp
 (setq org-alphabetical-lists t)
 (require 'ox-html)
 (require 'ox-latex)
 (require 'ox-ascii)
 (setq org-publish-project-alist
       '(
         ("noorul-blog"
          ;; Path to your org files.
          :base-directory "~/git/noorul.github.com/_org/"
          :base-extension "org"

          ;; Path to your Jekyll project.
          :publishing-directory "~/git/noorul.github.com/"
          :recursive t
          :publishing-function org-html-publish-to-html
          :headline-levels 4
          :html-extension "html"
          :body-only t ;; Only export section between <body> </body>
          )
         ("pubtest"
          ;; Path to your org files.
          :base-directory "~/partition"
          :base-extension "org"

          ;; Path to your Jekyll project.
          :publishing-directory "/tmp/pubtest"
          :recursive t
          :publishing-function org-html-publish-to-html
          :headline-levels 4
          :html-extension "html"
          :body-only t ;; Only export section between <body> </body>
          )
         ))
 #+end_src
*** Key bindings
 #+begin_src emacs-lisp
 ;;;_, org-mode bindings.
 (global-set-key (kbd "<f9> g") 'noorul/switch-to-gnus)
 (global-set-key (kbd "<f12>") 'org-agenda)
 (global-set-key (kbd "<f5>") 'bh/org-todo)
 (global-set-key (kbd "<S-f5>") 'bh/widen)
 ;; (global-set-key (kbd "<f7>") 'bh/set-truncate-lines)
 (global-set-key (kbd "<f8>") 'org-cycle-agenda-files)
 (global-set-key (kbd "<f9> <f9>") 'bh/show-org-agenda)
 (global-set-key (kbd "<f9> b") 'bbdb)
 (global-set-key (kbd "<f9> c") 'calendar)
 (global-set-key (kbd "<f9> f") 'boxquote-insert-file)
 (global-set-key (kbd "<f9> h") 'bh/hide-other)
 (global-set-key (kbd "<f9> n") 'org-narrow-to-subtree)
 (global-set-key (kbd "<f9> w") 'widen)

 (global-set-key (kbd "<f9> I") 'bh/punch-in)
 (global-set-key (kbd "<f9> O") 'bh/punch-out)

 (global-set-key (kbd "<f9> o") 'bh/make-org-scratch)

 (global-set-key (kbd "<f9> r") 'boxquote-region)
 (global-set-key (kbd "<f9> s") 'bh/switch-to-scratch)

 (global-set-key (kbd "<f9> t") 'bh/insert-inactive-timestamp)
 (global-set-key (kbd "<f9> T") 'tabify)
 (global-set-key (kbd "<f9> U") 'untabify)

 (global-set-key (kbd "<f9> v") 'visible-mode)
 (global-set-key (kbd "<f9> SPC") 'bh/clock-in-last-task)
 (global-set-key (kbd "C-<f9>") 'previous-buffer)
 (global-set-key (kbd "M-<f9>") 'org-toggle-inline-images)
 (global-set-key (kbd "C-x n r") 'narrow-to-region)
 (global-set-key (kbd "C-<f10>") 'next-buffer)
 (global-set-key (kbd "<f11>") 'org-clock-goto)
 (global-set-key (kbd "C-<f11>") 'org-clock-in)
 (global-set-key (kbd "C-s-<f12>") 'bh/save-then-publish)
 (global-set-key (kbd "C-M-r") 'org-capture)
 (global-set-key (kbd "C-c r") 'org-capture)

 #+end_src
*** Supporting functions
 #+begin_src emacs-lisp
 (defun noorul/gen_weekly_report (startPos endPos)
   "Generate weekly report using external python script"
   (interactive "r")
   (let (scriptName)
     (setq scriptName "~/git/sandbox/python/gen_weekly_report.py")
     (shell-command-on-region startPos endPos scriptName "*Weekly Report*"
                              nil nil t)))
 #+end_src
*** COMMENT Mediawiki export support
 #+begin_src emacs-lisp
 (use-package ox-mediawiki
   :load-path "~/projects/elisp/ox-mediawiki")
 #+end_src
*** Misc
 #+begin_src emacs-lisp
 (setq org-id-locations-file (convert-standard-filename
                                   (concat user-data-directory ".org-id-locations")))
 #+end_src
 [2016-03-19 Sat 15:02]

** Coding
*** Scala
#+begin_src emacs-lisp
(use-package ensime
  :ensure t
  :pin melpa-stable
  :init (setq ensime-startup-snapshot-notification nil
              ensime-startup-notification nil)
  )

(use-package sbt-mode
  :pin melpa)

(use-package scala-mode
  :pin melpa)

(defun noorul/ensime-sbt-do-assembly ()
  (interactive)
  (sbt-command "assembly"))

(define-key ensime-mode-map (kbd "C-c C-b a") 'noorul/ensime-sbt-do-assembly)
(define-key ensime-mode-map (kbd "C-c C-b h") 'sbt-hydra)
#+end_src
*** Expand region
#+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :defer t
  :bind ("C-=" . er/expand-region))
#+end_src
*** Magit - A Git Porcelain inside Emacs
#+begin_src emacs-lisp
(use-package magit
  :pin melpa-stable
  :ensure t
  :bind (("C-x g" . magit-status)
         ("C-x G" . magit-status-with-prefix))
  :init
  (defun magit-status-with-prefix ()
    (interactive)
    (let ((current-prefix-arg '(4)))
      (call-interactively 'magit-status))))

(add-hook
 'magit-mode-hook
 (lambda ()
   ;; Hide "Recent Commits"
   ;; https://github.com/magit/magit/issues/3230
   (magit-add-section-hook 'magit-status-sections-hook
                           'magit-insert-unpushed-to-upstream
                           'magit-insert-unpushed-to-upstream-or-recent
                           'replace)))

(use-package git-timemachine
  :ensure t)
#+end_src

** Startup
 #+begin_src emacs-lisp
 (org-agenda "" "c")
 (if (my/macbookpro)
     (progn
       (toggle-frame-fullscreen)
       (toggle-frame-fullscreen)))
 #+end_src
